
L476RG_Proj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b94  08007b94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b9c  08007b9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000000c  08007bb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08007bb0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003589  00000000  00000000  000407e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00043d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  00045888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a97  00000000  00000000  00047240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2b0  00000000  00000000  0004acd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a543  00000000  00000000  00069f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001744ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ac  00000000  00000000  00174520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b34 	.word	0x08007b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007b34 	.word	0x08007b34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f88b 	bl	80015de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81d 	bl	8000506 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fbe0 	bl	8000c90 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d0:	f000 f9d4 	bl	800087c <MX_SPI1_Init>
  MX_ADC1_Init();
 80004d4:	f000 f86c 	bl	80005b0 <MX_ADC1_Init>
  MX_CRC_Init();
 80004d8:	f000 f906 	bl	80006e8 <MX_CRC_Init>
  MX_I2C1_Init();
 80004dc:	f000 f926 	bl	800072c <MX_I2C1_Init>
  MX_I2C3_Init();
 80004e0:	f000 f962 	bl	80007a8 <MX_I2C3_Init>
  MX_LPTIM1_Init();
 80004e4:	f000 f99e 	bl	8000824 <MX_LPTIM1_Init>
  MX_SPI2_Init();
 80004e8:	f000 fa06 	bl	80008f8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004ec:	f000 fa42 	bl	8000974 <MX_SPI3_Init>
  MX_TIM1_Init();
 80004f0:	f000 fa7e 	bl	80009f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f4:	f000 fb28 	bl	8000b48 <MX_TIM2_Init>
  MX_DMA_Init();
 80004f8:	f000 fba4 	bl	8000c44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 fb72 	bl	8000be4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000500:	f000 f849 	bl	8000596 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x44>

08000506 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b096      	sub	sp, #88	; 0x58
 800050a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2244      	movs	r2, #68	; 0x44
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f007 fb05 	bl	8007b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000528:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800052c:	f003 fe18 	bl	8004160 <HAL_PWREx_ControlVoltageScaling>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000536:	f000 fc23 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053a:	2310      	movs	r3, #16
 800053c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000546:	2350      	movs	r3, #80	; 0x50
 8000548:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4618      	mov	r0, r3
 8000554:	f003 feb4 	bl	80042c0 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800055e:	f000 fc0f 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800056e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000574:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000578:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fa78 	bl	8004a74 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800058a:	f000 fbf9 	bl	8000d80 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3758      	adds	r7, #88	; 0x58
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	2017      	movs	r0, #23
 80005a0:	f002 fea3 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005a4:	2017      	movs	r0, #23
 80005a6:	f002 febc 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	; 0x40
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
 80005d2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
 80005e2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e4:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <MX_ADC1_Init+0x128>)
 80005e6:	4a3d      	ldr	r2, [pc, #244]	; (80006dc <MX_ADC1_Init+0x12c>)
 80005e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <MX_ADC1_Init+0x128>)
 80005ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <MX_ADC1_Init+0x128>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_ADC1_Init+0x128>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000606:	2204      	movs	r2, #4
 8000608:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MX_ADC1_Init+0x128>)
 800060c:	2201      	movs	r2, #1
 800060e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000612:	2201      	movs	r2, #1
 8000614:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000616:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000618:	2201      	movs	r2, #1
 800061a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_ADC1_Init+0x128>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_ADC1_Init+0x128>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0x128>)
 800063a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <MX_ADC1_Init+0x128>)
 800064a:	f001 fae3 	bl	8001c14 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000654:	f000 fb94 	bl	8000d80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800065c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000660:	4619      	mov	r1, r3
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000664:	f002 fcb6 	bl	8002fd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800066e:	f000 fb87 	bl	8000d80 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_ADC1_Init+0x130>)
 8000674:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000676:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800067a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0x134>)
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.ITMode = DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.HighThreshold = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_ADC1_Init+0x128>)
 8000696:	f002 fa3b 	bl	8002b10 <HAL_ADC_AnalogWDGConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80006a0:	f000 fb6e 	bl	8000d80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_ADC1_Init+0x134>)
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b0:	237f      	movs	r3, #127	; 0x7f
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b4:	2304      	movs	r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0x128>)
 80006c2:	f001 fe35 	bl	8002330 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80006cc:	f000 fb58 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3740      	adds	r7, #64	; 0x40
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000204 	.word	0x20000204
 80006dc:	50040000 	.word	0x50040000
 80006e0:	7dc00000 	.word	0x7dc00000
 80006e4:	0c900008 	.word	0x0c900008

080006e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_CRC_Init+0x3c>)
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <MX_CRC_Init+0x40>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_CRC_Init+0x3c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_CRC_Init+0x3c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_CRC_Init+0x3c>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_CRC_Init+0x3c>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_CRC_Init+0x3c>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_CRC_Init+0x3c>)
 8000712:	f002 fe21 	bl	8003358 <HAL_CRC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800071c:	f000 fb30 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000017c 	.word	0x2000017c
 8000728:	40023000 	.word	0x40023000

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f003 faab 	bl	8003cc2 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fb05 	bl	8000d80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f003 fb31 	bl	8003de0 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fafc 	bl	8000d80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f003 fb73 	bl	8003e76 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 faf3 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000128 	.word	0x20000128
 80007a4:	40005400 	.word	0x40005400

080007a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C3_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C3_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C3_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C3_Init+0x74>)
 80007e4:	f003 fa6d 	bl	8003cc2 <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 fac7 	bl	8000d80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C3_Init+0x74>)
 80007f6:	f003 faf3 	bl	8003de0 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 fabe 	bl	8000d80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C3_Init+0x74>)
 8000808:	f003 fb35 	bl	8003e76 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 fab5 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000070 	.word	0x20000070
 8000820:	40005c00 	.word	0x40005c00

08000824 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_LPTIM1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_LPTIM1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_LPTIM1_Init+0x50>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_LPTIM1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_LPTIM1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_LPTIM1_Init+0x50>)
 8000862:	f003 fb55 	bl	8003f10 <HAL_LPTIM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 fa88 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200002b0 	.word	0x200002b0
 8000878:	40007c00 	.word	0x40007c00

0800087c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	f44f 7240 	mov.w	r2, #768	; 0x300
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	f004 ffaa 	bl	8005834 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa4b 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000334 	.word	0x20000334
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_SPI2_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_SPI2_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_SPI2_Init+0x74>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_SPI2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI2_Init+0x74>)
 8000912:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000916:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI2_Init+0x74>)
 8000926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_SPI2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI2_Init+0x74>)
 8000946:	2207      	movs	r2, #7
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_SPI2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI2_Init+0x74>)
 8000952:	2208      	movs	r2, #8
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_SPI2_Init+0x74>)
 8000958:	f004 ff6c 	bl	8005834 <HAL_SPI_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa0d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c4 	.word	0x200000c4
 8000970:	40003800 	.word	0x40003800

08000974 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_SPI3_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_SPI3_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_SPI3_Init+0x74>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_SPI3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_SPI3_Init+0x74>)
 800098e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000992:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_SPI3_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_SPI3_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_SPI3_Init+0x74>)
 80009d4:	f004 ff2e 	bl	8005834 <HAL_SPI_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 f9cf 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001a0 	.word	0x200001a0
 80009ec:	40003c00 	.word	0x40003c00

080009f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09a      	sub	sp, #104	; 0x68
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	222c      	movs	r2, #44	; 0x2c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 f87a 	bl	8007b24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a32:	4a44      	ldr	r2, [pc, #272]	; (8000b44 <MX_TIM1_Init+0x154>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a42:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a50:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5c:	4838      	ldr	r0, [pc, #224]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a5e:	f004 ff8c 	bl	800597a <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f98a 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a76:	4619      	mov	r1, r3
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a7a:	f005 f9cf 	bl	8005e1c <HAL_TIM_ConfigClockSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a84:	f000 f97c 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000a8a:	f004 ffcd 	bl	8005a28 <HAL_TIM_OC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a94:	f000 f974 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4825      	ldr	r0, [pc, #148]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000aac:	f005 febc 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ab6:	f000 f963 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4818      	ldr	r0, [pc, #96]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000ae0:	f005 f922 	bl	8005d28 <HAL_TIM_OC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000aea:	f000 f949 	bl	8000d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000b24:	f005 ff08 	bl	8006938 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000b2e:	f000 f927 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_TIM1_Init+0x150>)
 8000b34:	f000 fbaa 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3768      	adds	r7, #104	; 0x68
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200002e8 	.word	0x200002e8
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000b90:	f004 fef3 	bl	800597a <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b9a:	f000 f8f1 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000bac:	f005 f936 	bl	8005e1c <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb6:	f000 f8e3 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_TIM2_Init+0x98>)
 8000bc8:	f005 fe2e 	bl	8006828 <HAL_TIMEx_MasterConfigSynchronization>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f000 f8d5 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000398 	.word	0x20000398

08000be4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_USART2_UART_Init+0x5c>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bf0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x58>)
 8000c28:	f005 ff22 	bl	8006a70 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 f8a5 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200003e4 	.word	0x200003e4
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_DMA_Init+0x48>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <MX_DMA_Init+0x48>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6493      	str	r3, [r2, #72]	; 0x48
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_DMA_Init+0x48>)
 8000c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2010      	movs	r0, #16
 8000c68:	f002 fb3f 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c6c:	2010      	movs	r0, #16
 8000c6e:	f002 fb58 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2011      	movs	r0, #17
 8000c78:	f002 fb37 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c7c:	2011      	movs	r0, #17
 8000c7e:	f002 fb50 	bl	8003322 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a33      	ldr	r2, [pc, #204]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xe8>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f002 ff9c 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xec>)
 8000d2c:	f002 fde4 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f002 fdd5 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_RST_Pin */
  GPIO_InitStruct.Pin = LoRa_RST_Pin;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_RST_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f002 fdc5 	bl	80038f8 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	48000800 	.word	0x48000800

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_MspInit+0x78>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_MspInit+0x78>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6613      	str	r3, [r2, #96]	; 0x60
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_MspInit+0x78>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_MspInit+0x78>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_MspInit+0x78>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_MspInit+0x78>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000dcc:	2005      	movs	r0, #5
 8000dce:	f002 fa81 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f002 fa87 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f002 faa0 	bl	8003322 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8000de6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000dea:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f92f 	bl	8004054 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000df6:	f003 f98d 	bl	8004114 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ac      	sub	sp, #176	; 0xb0
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2288      	movs	r2, #136	; 0x88
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fe7b 	bl	8007b24 <memset>
  if(hadc->Instance==ADC1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_ADC_MspInit+0xb8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d13f      	bne.n	8000eb8 <HAL_ADC_MspInit+0xb0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 f836 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000e56:	f7ff ff93 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_ADC_MspInit+0xbc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e90:	230b      	movs	r3, #11
 8000e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_ADC_MspInit+0xc0>)
 8000ea4:	f002 fd28 	bl	80038f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	2012      	movs	r0, #18
 8000eae:	f002 fa1c 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eb2:	2012      	movs	r0, #18
 8000eb4:	f002 fa35 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37b0      	adds	r7, #176	; 0xb0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	50040000 	.word	0x50040000
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000800 	.word	0x48000800

08000ecc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_CRC_MspInit+0x38>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10b      	bne.n	8000ef6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_CRC_MspInit+0x3c>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_CRC_MspInit+0x3c>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_CRC_MspInit+0x3c>)
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023000 	.word	0x40023000
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ae      	sub	sp, #184	; 0xb8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2288      	movs	r2, #136	; 0x88
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 fdf9 	bl	8007b24 <memset>
  if(hi2c->Instance==I2C1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a42      	ldr	r2, [pc, #264]	; (8001040 <HAL_I2C_MspInit+0x134>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d13c      	bne.n	8000fb6 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 ffb7 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f54:	f7ff ff14 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	4a39      	ldr	r2, [pc, #228]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f94:	4619      	mov	r1, r3
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <HAL_I2C_MspInit+0x13c>)
 8000f98:	f002 fcae 	bl	80038f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa0:	4a28      	ldr	r2, [pc, #160]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb4:	e040      	b.n	8001038 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <HAL_I2C_MspInit+0x140>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d13b      	bne.n	8001038 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 ff74 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8000fda:	f7ff fed1 	bl	8000d80 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001002:	2301      	movs	r3, #1
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800100e:	2304      	movs	r3, #4
 8001010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_I2C_MspInit+0x144>)
 800101c:	f002 fc6c 	bl	80038f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_I2C_MspInit+0x138>)
 8001026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800102a:	6593      	str	r3, [r2, #88]	; 0x58
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_I2C_MspInit+0x138>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	bf00      	nop
 800103a:	37b8      	adds	r7, #184	; 0xb8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005400 	.word	0x40005400
 8001044:	40021000 	.word	0x40021000
 8001048:	48000400 	.word	0x48000400
 800104c:	40005c00 	.word	0x40005c00
 8001050:	48000800 	.word	0x48000800

08001054 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0a6      	sub	sp, #152	; 0x98
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2288      	movs	r2, #136	; 0x88
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fd5d 	bl	8007b24 <memset>
  if(hlptim->Instance==LPTIM1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_LPTIM_MspInit+0x60>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d11a      	bne.n	80010aa <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800107a:	2300      	movs	r3, #0
 800107c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f003 ff1a 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800108e:	f7ff fe77 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_LPTIM_MspInit+0x64>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_LPTIM_MspInit+0x64>)
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_LPTIM_MspInit+0x64>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3798      	adds	r7, #152	; 0x98
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40007c00 	.word	0x40007c00
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_SPI_MspInit+0x138>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d129      	bne.n	8001132 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f2:	623b      	str	r3, [r7, #32]
 80010f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a3f      	ldr	r2, [pc, #252]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800110e:	23e0      	movs	r3, #224	; 0xe0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111e:	2305      	movs	r3, #5
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f002 fbe4 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001130:	e05c      	b.n	80011ec <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a31      	ldr	r2, [pc, #196]	; (80011fc <HAL_SPI_MspInit+0x140>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d129      	bne.n	8001190 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6593      	str	r3, [r2, #88]	; 0x58
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800116c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800117e:	2305      	movs	r3, #5
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4619      	mov	r1, r3
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <HAL_SPI_MspInit+0x144>)
 800118a:	f002 fbb5 	bl	80038f8 <HAL_GPIO_Init>
}
 800118e:	e02d      	b.n	80011ec <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_SPI_MspInit+0x148>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d128      	bne.n	80011ec <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80011a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_SPI_MspInit+0x13c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011dc:	2306      	movs	r3, #6
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <HAL_SPI_MspInit+0x14c>)
 80011e8:	f002 fb86 	bl	80038f8 <HAL_GPIO_Init>
}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40003800 	.word	0x40003800
 8001200:	48000400 	.word	0x48000400
 8001204:	40003c00 	.word	0x40003c00
 8001208:	48000800 	.word	0x48000800

0800120c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_TIM_Base_MspInit+0x78>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d11c      	bne.n	8001258 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 8001224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001228:	6613      	str	r3, [r2, #96]	; 0x60
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	2019      	movs	r0, #25
 800123c:	f002 f855 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001240:	2019      	movs	r0, #25
 8001242:	f002 f86e 	bl	8003322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2102      	movs	r1, #2
 800124a:	201b      	movs	r0, #27
 800124c:	f002 f84d 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001250:	201b      	movs	r0, #27
 8001252:	f002 f866 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001256:	e010      	b.n	800127a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001260:	d10b      	bne.n	800127a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6593      	str	r3, [r2, #88]	; 0x58
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012c00 	.word	0x40012c00
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_TIM_MspPostInit+0x68>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11d      	bne.n	80012ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f002 fb07 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40012c00 	.word	0x40012c00
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ac      	sub	sp, #176	; 0xb0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2288      	movs	r2, #136	; 0x88
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 fc01 	bl	8007b24 <memset>
  if(huart->Instance==USART2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_UART_MspInit+0x16c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 8098 	bne.w	800145e <HAL_UART_MspInit+0x162>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001332:	2304      	movs	r3, #4
 8001334:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fdbe 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001346:	f7ff fd1b 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_UART_MspInit+0x170>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a47      	ldr	r2, [pc, #284]	; (800146c <HAL_UART_MspInit+0x170>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_UART_MspInit+0x170>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_UART_MspInit+0x170>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a41      	ldr	r2, [pc, #260]	; (800146c <HAL_UART_MspInit+0x170>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <HAL_UART_MspInit+0x170>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137a:	230c      	movs	r3, #12
 800137c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f002 faa9 	bl	80038f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013a8:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_UART_MspInit+0x178>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013de:	4824      	ldr	r0, [pc, #144]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013e0:	f002 f8a4 	bl	800352c <HAL_DMA_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80013ea:	f7ff fcc9 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013f2:	671a      	str	r2, [r3, #112]	; 0x70
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_UART_MspInit+0x174>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_UART_MspInit+0x17c>)
 80013fc:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_UART_MspInit+0x180>)
 80013fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001402:	2202      	movs	r2, #2
 8001404:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001408:	2210      	movs	r2, #16
 800140a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_UART_MspInit+0x17c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x17c>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_UART_MspInit+0x17c>)
 800142c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001430:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001434:	f002 f87a 	bl	800352c <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800143e:	f7ff fc9f 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_UART_MspInit+0x17c>)
 8001446:	66da      	str	r2, [r3, #108]	; 0x6c
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_UART_MspInit+0x17c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2026      	movs	r0, #38	; 0x26
 8001454:	f001 ff49 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001458:	2026      	movs	r0, #38	; 0x26
 800145a:	f001 ff62 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	37b0      	adds	r7, #176	; 0xb0
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004400 	.word	0x40004400
 800146c:	40021000 	.word	0x40021000
 8001470:	20000028 	.word	0x20000028
 8001474:	4002006c 	.word	0x4002006c
 8001478:	20000268 	.word	0x20000268
 800147c:	40020080 	.word	0x40020080

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8dc 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80014d8:	f002 fe98 	bl	800420c <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Channel6_IRQHandler+0x10>)
 80014e6:	f002 f958 	bl	800379a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000028 	.word	0x20000028

080014f4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Channel7_IRQHandler+0x10>)
 80014fa:	f002 f94e 	bl	800379a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000268 	.word	0x20000268

08001508 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <ADC1_2_IRQHandler+0x10>)
 800150e:	f000 fcd7 	bl	8001ec0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000204 	.word	0x20000204

0800151c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001520:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001524:	f002 fbaa 	bl	8003c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001532:	f004 fada 	bl	8005aea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002e8 	.word	0x200002e8

08001540 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM1_CC_IRQHandler+0x10>)
 8001546:	f004 fad0 	bl	8005aea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002e8 	.word	0x200002e8

08001554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART2_IRQHandler+0x10>)
 800155a:	f005 fad7 	bl	8006b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003e4 	.word	0x200003e4

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001590:	f7ff ffea 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <LoopForever+0xe>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <LoopForever+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f006 fa8f 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015be:	f7fe ff7f 	bl	80004c0 <main>

080015c2 <LoopForever>:

LoopForever:
    b LoopForever
 80015c2:	e7fe      	b.n	80015c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015d0:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 80015d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d8:	2000046c 	.word	0x2000046c

080015dc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC3_IRQHandler>

080015de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f001 fe73 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f80e 	bl	8001610 <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	e001      	b.n	8001604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001600:	f7ff fbc4 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001604:	79fb      	ldrb	r3, [r7, #7]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_InitTick+0x70>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fe7f 	bl	800333e <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d809      	bhi.n	8001660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f001 fe49 	bl	80032ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_InitTick+0x74>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e007      	b.n	8001670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e004      	b.n	8001670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e001      	b.n	8001670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000468 	.word	0x20000468

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000468 	.word	0x20000468

080016c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3360      	adds	r3, #96	; 0x60
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <LL_ADC_SetOffset+0x44>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	4313      	orrs	r3, r2
 8001760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	03fff000 	.word	0x03fff000

08001778 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3360      	adds	r3, #96	; 0x60
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3360      	adds	r3, #96	; 0x60
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3330      	adds	r3, #48	; 0x30
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	4413      	add	r3, r2
 800181e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	211f      	movs	r1, #31
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0e9b      	lsrs	r3, r3, #26
 8001838:	f003 011f 	and.w	r1, r3, #31
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800187e:	b480      	push	{r7}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3314      	adds	r3, #20
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0e5b      	lsrs	r3, r3, #25
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0d1b      	lsrs	r3, r3, #20
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2107      	movs	r1, #7
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0d1b      	lsrs	r3, r3, #20
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c8:	bf00      	nop
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0318 	and.w	r3, r3, #24
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f8:	40d9      	lsrs	r1, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	400b      	ands	r3, r1
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	0007ffff 	.word	0x0007ffff

0800191c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (5) On STM32L4, parameter available on devices with only 1 ADC instance.\n
  *         (6) On STM32L4, parameter available on devices with several ADC instances.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	330c      	adds	r3, #12
 800192c:	4618      	mov	r0, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	0d1b      	lsrs	r3, r3, #20
 8001932:	f003 0103 	and.w	r1, r3, #3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 0201 	and.w	r2, r3, #1
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4403      	add	r3, r0
 800194a:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001956:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	400b      	ands	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3320      	adds	r3, #32
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0d1b      	lsrs	r3, r3, #20
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	0419      	lsls	r1, r3, #16
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 031f 	and.w	r3, r3, #31
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6093      	str	r3, [r2, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsEnabled+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsEnabled+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d101      	bne.n	8001acc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	605a      	str	r2, [r3, #4]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	605a      	str	r2, [r3, #4]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	605a      	str	r2, [r3, #4]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e136      	b.n	8001e9c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff f8e3 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fede 	bl	8001a16 <LL_ADC_IsDeepPowerDownEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fec4 	bl	80019f2 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fef9 	bl	8001a66 <LL_ADC_IsInternalRegulatorEnabled>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fedd 	bl	8001a3e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c84:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <HAL_ADC_Init+0x290>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <HAL_ADC_Init+0x294>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fedb 	bl	8001a66 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f043 0210 	orr.w	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff feec 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80cf 	bne.w	8001e8a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80cb 	bne.w	8001e8a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cfc:	f043 0202 	orr.w	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fec0 	bl	8001a8e <LL_ADC_IsEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d115      	bne.n	8001d40 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d14:	4865      	ldr	r0, [pc, #404]	; (8001eac <HAL_ADC_Init+0x298>)
 8001d16:	f7ff feba 	bl	8001a8e <LL_ADC_IsEnabled>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4864      	ldr	r0, [pc, #400]	; (8001eb0 <HAL_ADC_Init+0x29c>)
 8001d1e:	f7ff feb6 	bl	8001a8e <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	431c      	orrs	r4, r3
 8001d26:	4863      	ldr	r0, [pc, #396]	; (8001eb4 <HAL_ADC_Init+0x2a0>)
 8001d28:	f7ff feb1 	bl	8001a8e <LL_ADC_IsEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	485f      	ldr	r0, [pc, #380]	; (8001eb8 <HAL_ADC_Init+0x2a4>)
 8001d3c:	f7ff fcc4 	bl	80016c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e5b      	ldrb	r3, [r3, #25]
 8001d44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	045b      	lsls	r3, r3, #17
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_ADC_Init+0x2a8>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe7f 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001db6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe8c 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 8001dc2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d13d      	bne.n	8001e46 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d13a      	bne.n	8001e46 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dd4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ddc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dec:	f023 0302 	bic.w	r3, r3, #2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	430b      	orrs	r3, r1
 8001df8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d118      	bne.n	8001e36 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e26:	430a      	orrs	r2, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	e007      	b.n	8001e46 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10c      	bne.n	8001e68 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f023 010f 	bic.w	r1, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
 8001e66:	e007      	b.n	8001e78 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 020f 	bic.w	r2, r2, #15
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
 8001e88:	e007      	b.n	8001e9a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	; 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	053e2d63 	.word	0x053e2d63
 8001eac:	50040000 	.word	0x50040000
 8001eb0:	50040100 	.word	0x50040100
 8001eb4:	50040200 	.word	0x50040200
 8001eb8:	50040300 	.word	0x50040300
 8001ebc:	fff0c007 	.word	0xfff0c007

08001ec0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001edc:	4882      	ldr	r0, [pc, #520]	; (80020e8 <HAL_ADC_IRQHandler+0x228>)
 8001ede:	f7ff fd6c 	bl	80019ba <LL_ADC_GetMultimode>
 8001ee2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d017      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x5e>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 f855 	bl	8002fc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x72>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8083 	beq.w	8002044 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d07d      	beq.n	8002044 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fc38 	bl	80017da <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d062      	beq.n	8002036 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_ADC_IRQHandler+0x22c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d002      	beq.n	8001f80 <HAL_ADC_IRQHandler+0xc0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_IRQHandler+0xc2>
 8001f80:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_ADC_IRQHandler+0x230>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d008      	beq.n	8001f9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d002      	beq.n	8001f9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d104      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	e00c      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a50      	ldr	r2, [pc, #320]	; (80020ec <HAL_ADC_IRQHandler+0x22c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d002      	beq.n	8001fb6 <HAL_ADC_IRQHandler+0xf6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_IRQHandler+0xf8>
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	; (80020f0 <HAL_ADC_IRQHandler+0x230>)
 8001fb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d135      	bne.n	8002036 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fd69 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020c 	bic.w	r2, r2, #12
 8001ff6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d112      	bne.n	8002036 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
 800201c:	e00b      	b.n	8002036 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f95c 	bl	80022f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	220c      	movs	r2, #12
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_ADC_IRQHandler+0x198>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 809f 	beq.w	80021a2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8099 	beq.w	80021a2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fbe3 	bl	8001858 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002092:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fb9e 	bl	80017da <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_ADC_IRQHandler+0x22c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_IRQHandler+0x1f0>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_IRQHandler+0x1f2>
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_ADC_IRQHandler+0x230>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d002      	beq.n	80020cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b07      	cmp	r3, #7
 80020ca:	d104      	bne.n	80020d6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	e013      	b.n	80020fe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_ADC_IRQHandler+0x22c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x234>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_IRQHandler+0x236>
 80020e6:	bf00      	nop
 80020e8:	50040300 	.word	0x50040300
 80020ec:	50040100 	.word	0x50040100
 80020f0:	50040000 	.word	0x50040000
 80020f4:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_ADC_IRQHandler+0x42c>)
 80020f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d047      	beq.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_ADC_IRQHandler+0x25e>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03f      	beq.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d13a      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d133      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12e      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fccd 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11a      	bne.n	800217c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002154:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d112      	bne.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
 800217a:	e00b      	b.n	8002194 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 feeb 	bl	8002f70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2260      	movs	r2, #96	; 0x60
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d011      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f8a0 	bl	8002308 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d012      	beq.n	8002200 <HAL_ADC_IRQHandler+0x340>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fed1 	bl	8002f98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <HAL_ADC_IRQHandler+0x370>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fec3 	bl	8002fac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d036      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x3e8>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d031      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	e014      	b.n	800227c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002258:	4825      	ldr	r0, [pc, #148]	; (80022f0 <HAL_ADC_IRQHandler+0x430>)
 800225a:	f7ff fbbc 	bl	80019d6 <LL_ADC_GetMultiDMATransfer>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002264:	2301      	movs	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
 8002268:	e008      	b.n	800227c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10e      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f83e 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d018      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x424>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f043 0208 	orr.w	r2, r3, #8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fe50 	bl	8002f84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	50040000 	.word	0x50040000
 80022f0:	50040300 	.word	0x50040300

080022f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0b6      	sub	sp, #216	; 0xd8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x22>
 800234e:	2302      	movs	r3, #2
 8002350:	e3c7      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x7b2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fba8 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 83a8 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d824      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	3b02      	subs	r3, #2
 800237a:	2b03      	cmp	r3, #3
 800237c:	d81b      	bhi.n	80023b6 <HAL_ADC_ConfigChannel+0x86>
 800237e:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <HAL_ADC_ConfigChannel+0x54>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	08002395 	.word	0x08002395
 8002388:	0800239d 	.word	0x0800239d
 800238c:	080023a5 	.word	0x080023a5
 8002390:	080023ad 	.word	0x080023ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	220c      	movs	r2, #12
 8002398:	605a      	str	r2, [r3, #4]
          break;
 800239a:	e011      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2212      	movs	r2, #18
 80023a0:	605a      	str	r2, [r3, #4]
          break;
 80023a2:	e00d      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2218      	movs	r2, #24
 80023a8:	605a      	str	r2, [r3, #4]
          break;
 80023aa:	e009      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b2:	605a      	str	r2, [r3, #4]
          break;
 80023b4:	e004      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2206      	movs	r2, #6
 80023ba:	605a      	str	r2, [r3, #4]
          break;
 80023bc:	e000      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff fa17 	bl	8001800 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb6c 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 80023dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb78 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 80023ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 81a6 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 81a1 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff fa35 	bl	800187e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	08db      	lsrs	r3, r3, #3
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00a      	beq.n	800244c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002446:	f7ff f973 	bl	8001730 <LL_ADC_SetOffset>
 800244a:	e17b      	b.n	8002744 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f990 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002458:	4603      	mov	r3, r0
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x148>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f985 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	e01e      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x186>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f97a 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800249a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800249e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e004      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x19e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	e018      	b.n	8002500 <HAL_ADC_ConfigChannel+0x1d0>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e004      	b.n	8002500 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80024f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002500:	429a      	cmp	r2, r3
 8002502:	d106      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f949 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f92d 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x20e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f922 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	e01e      	b.n	800257c <HAL_ADC_ConfigChannel+0x24c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f917 	bl	8001778 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800255c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e004      	b.n	800257a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x264>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	e018      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x296>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e004      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f8e6 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2102      	movs	r1, #2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f8ca 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x2d4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2102      	movs	r1, #2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f8bf 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	e01e      	b.n	8002642 <HAL_ADC_ConfigChannel+0x312>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f8b4 	bl	8001778 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800262a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x32a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e016      	b.n	8002688 <HAL_ADC_ConfigChannel+0x358>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800266c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800266e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800267e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	2102      	movs	r1, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f885 	bl	80017a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2103      	movs	r1, #3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f869 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x396>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2103      	movs	r1, #3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f85e 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	e017      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x3c6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2103      	movs	r1, #3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f853 	bl	8001778 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80026ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x3de>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	e011      	b.n	8002732 <HAL_ADC_ConfigChannel+0x402>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800271c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e003      	b.n	8002732 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800272a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002732:	429a      	cmp	r2, r3
 8002734:	d106      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	2103      	movs	r1, #3
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f830 	bl	80017a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f9a0 	bl	8001a8e <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 813f 	bne.w	80029d4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	461a      	mov	r2, r3
 8002764:	f7ff f8b6 	bl	80018d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a8e      	ldr	r2, [pc, #568]	; (80029a8 <HAL_ADC_ConfigChannel+0x678>)
 800276e:	4293      	cmp	r3, r2
 8002770:	f040 8130 	bne.w	80029d4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <HAL_ADC_ConfigChannel+0x46c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2b09      	cmp	r3, #9
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e019      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x4a0>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027b4:	2320      	movs	r3, #32
 80027b6:	e003      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	bf94      	ite	ls
 80027ca:	2301      	movls	r3, #1
 80027cc:	2300      	movhi	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d079      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x4c0>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	3301      	adds	r3, #1
 80027e8:	069b      	lsls	r3, r3, #26
 80027ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ee:	e015      	b.n	800281c <HAL_ADC_ConfigChannel+0x4ec>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e003      	b.n	8002814 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3301      	adds	r3, #1
 8002816:	069b      	lsls	r3, r3, #26
 8002818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_ConfigChannel+0x50c>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	3301      	adds	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	e017      	b.n	800286c <HAL_ADC_ConfigChannel+0x53c>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	ea42 0103 	orr.w	r1, r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x562>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	051b      	lsls	r3, r3, #20
 8002890:	e018      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x594>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c4:	430b      	orrs	r3, r1
 80028c6:	e080      	b.n	80029ca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x5b4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e9b      	lsrs	r3, r3, #26
 80028da:	3301      	adds	r3, #1
 80028dc:	069b      	lsls	r3, r3, #26
 80028de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e2:	e015      	b.n	8002910 <HAL_ADC_ConfigChannel+0x5e0>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e003      	b.n	8002908 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3301      	adds	r3, #1
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x600>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	e017      	b.n	8002960 <HAL_ADC_ConfigChannel+0x630>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	61fb      	str	r3, [r7, #28]
  return result;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	ea42 0103 	orr.w	r1, r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_ADC_ConfigChannel+0x65c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	3301      	adds	r3, #1
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	3b1e      	subs	r3, #30
 8002984:	051b      	lsls	r3, r3, #20
 8002986:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298a:	e01d      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x698>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	613b      	str	r3, [r7, #16]
  return result;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e005      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x684>
 80029a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f003 021f 	and.w	r2, r3, #31
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	3b1e      	subs	r3, #30
 80029c2:	051b      	lsls	r3, r3, #20
 80029c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c8:	430b      	orrs	r3, r1
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe ff55 	bl	800187e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_ADC_ConfigChannel+0x7bc>)
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d07a      	beq.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e0:	4843      	ldr	r0, [pc, #268]	; (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 80029e2:	f7fe fe97 	bl	8001714 <LL_ADC_GetCommonPathInternalCh>
 80029e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a41      	ldr	r2, [pc, #260]	; (8002af4 <HAL_ADC_ConfigChannel+0x7c4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d12c      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d126      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x6e4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <HAL_ADC_ConfigChannel+0x7cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d15d      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4834      	ldr	r0, [pc, #208]	; (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a20:	f7fe fe65 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4a36      	ldr	r2, [pc, #216]	; (8002b04 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a3e:	e002      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f9      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a4c:	e040      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d118      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x75a>
 8002a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d112      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_ADC_ConfigChannel+0x748>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_ADC_ConfigChannel+0x7cc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d12d      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a80:	4619      	mov	r1, r3
 8002a82:	481b      	ldr	r0, [pc, #108]	; (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a84:	f7fe fe33 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a88:	e024      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d120      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11a      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480e      	ldr	r0, [pc, #56]	; (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ab6:	f7fe fe1a 	bl	80016ee <LL_ADC_SetCommonPathInternalCh>
 8002aba:	e00c      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ace:	e002      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ade:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	37d8      	adds	r7, #216	; 0xd8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	80080000 	.word	0x80080000
 8002af0:	50040300 	.word	0x50040300
 8002af4:	c7520000 	.word	0xc7520000
 8002af8:	50040000 	.word	0x50040000
 8002afc:	50040200 	.word	0x50040200
 8002b00:	20000000 	.word	0x20000000
 8002b04:	053e2d63 	.word	0x053e2d63
 8002b08:	cb840000 	.word	0xcb840000
 8002b0c:	80000001 	.word	0x80000001

08002b10 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	; 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b28:	d003      	beq.n	8002b32 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b2e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_AnalogWDGConfig+0x30>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e1ea      	b.n	8002f16 <HAL_ADC_AnalogWDGConfig+0x406>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ffb1 	bl	8001ab4 <LL_ADC_REG_IsConversionOngoing>
 8002b52:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe ffbe 	bl	8001ada <LL_ADC_INJ_IsConversionOngoing>
 8002b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f040 81c8 	bne.w	8002ef8 <HAL_ADC_AnalogWDGConfig+0x3e8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 81c4 	bne.w	8002ef8 <HAL_ADC_AnalogWDGConfig+0x3e8>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4aaa      	ldr	r2, [pc, #680]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	f040 80a2 	bne.w	8002cc0 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b84:	d034      	beq.n	8002bf0 <HAL_ADC_AnalogWDGConfig+0xe0>
 8002b86:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b8a:	d856      	bhi.n	8002c3a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b90:	d04b      	beq.n	8002c2a <HAL_ADC_AnalogWDGConfig+0x11a>
 8002b92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b96:	d850      	bhi.n	8002c3a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b98:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002b9c:	d01b      	beq.n	8002bd6 <HAL_ADC_AnalogWDGConfig+0xc6>
 8002b9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ba2:	d84a      	bhi.n	8002c3a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d037      	beq.n	8002c1a <HAL_ADC_AnalogWDGConfig+0x10a>
 8002baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bae:	d844      	bhi.n	8002c3a <HAL_ADC_AnalogWDGConfig+0x12a>
 8002bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb4:	d029      	beq.n	8002c0a <HAL_ADC_AnalogWDGConfig+0xfa>
 8002bb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bba:	d13e      	bne.n	8002c3a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bc8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4994      	ldr	r1, [pc, #592]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002bd0:	f7fe fea4 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002bd4:	e039      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002be2:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002be6:	461a      	mov	r2, r3
 8002be8:	498d      	ldr	r1, [pc, #564]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002bea:	f7fe fe97 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002bee:	e02c      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bfc:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002c00:	461a      	mov	r2, r3
 8002c02:	4987      	ldr	r1, [pc, #540]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c04:	f7fe fe8a 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002c08:	e01f      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a85      	ldr	r2, [pc, #532]	; (8002e24 <HAL_ADC_AnalogWDGConfig+0x314>)
 8002c10:	4983      	ldr	r1, [pc, #524]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fe82 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c18:	e017      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a82      	ldr	r2, [pc, #520]	; (8002e28 <HAL_ADC_AnalogWDGConfig+0x318>)
 8002c20:	497f      	ldr	r1, [pc, #508]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fe7a 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c28:	e00f      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7f      	ldr	r2, [pc, #508]	; (8002e2c <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002c30:	497b      	ldr	r1, [pc, #492]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fe72 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4977      	ldr	r1, [pc, #476]	; (8002e20 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fe6a 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c48:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c86:	f7fe fe76 	bl	8001976 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff30 	bl	8001b00 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7b1b      	ldrb	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe ff50 	bl	8001b52 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002cb2:	e12a      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff7a 	bl	8001bb2 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002cbe:	e124      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cc8:	d01b      	beq.n	8002d02 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002cca:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cce:	f200 8086 	bhi.w	8002dde <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d079      	beq.n	8002dcc <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cdc:	d87f      	bhi.n	8002dde <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cde:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ce2:	d00e      	beq.n	8002d02 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002ce4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ce8:	d879      	bhi.n	8002dde <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cee:	d06d      	beq.n	8002dcc <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf4:	d873      	bhi.n	8002dde <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cfa:	d067      	beq.n	8002dcc <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d00:	d16d      	bne.n	8002dde <HAL_ADC_AnalogWDGConfig+0x2ce>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4a      	ldr	r2, [pc, #296]	; (8002e30 <HAL_ADC_AnalogWDGConfig+0x320>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d12f      	bne.n	8002d6c <HAL_ADC_AnalogWDGConfig+0x25c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <HAL_ADC_AnalogWDGConfig+0x21a>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	e016      	b.n	8002d58 <HAL_ADC_AnalogWDGConfig+0x248>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	61bb      	str	r3, [r7, #24]
  return result;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_AnalogWDGConfig+0x236>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_AnalogWDGConfig+0x23e>
  return __builtin_clz(value);
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2201      	movs	r2, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002d6a:	e041      	b.n	8002df0 <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_ADC_AnalogWDGConfig+0x27a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2201      	movs	r2, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	e016      	b.n	8002db8 <HAL_ADC_AnalogWDGConfig+0x2a8>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  return result;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_AnalogWDGConfig+0x296>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e003      	b.n	8002dae <HAL_ADC_AnalogWDGConfig+0x29e>
  return __builtin_clz(value);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	2201      	movs	r2, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002dca:	e011      	b.n	8002df0 <HAL_ADC_AnalogWDGConfig+0x2e0>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fe fda0 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002ddc:	e008      	b.n	8002df0 <HAL_ADC_AnalogWDGConfig+0x2e0>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fe fd97 	bl	800191c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002dee:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0318 	and.w	r3, r3, #24
 8002dfa:	2b18      	cmp	r3, #24
 8002dfc:	d01a      	beq.n	8002e34 <HAL_ADC_AnalogWDGConfig+0x324>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	f1c3 0302 	rsb	r3, r3, #2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	f003 031e 	and.w	r3, r3, #30
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	e00d      	b.n	8002e3a <HAL_ADC_AnalogWDGConfig+0x32a>
 8002e1e:	bf00      	nop
 8002e20:	7dc00000 	.word	0x7dc00000
 8002e24:	0087ffff 	.word	0x0087ffff
 8002e28:	0107ffff 	.word	0x0107ffff
 8002e2c:	0187ffff 	.word	0x0187ffff
 8002e30:	0017ffff 	.word	0x0017ffff
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0318 	and.w	r3, r3, #24
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	d00f      	beq.n	8002e6a <HAL_ADC_AnalogWDGConfig+0x35a>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	f1c3 0302 	rsb	r3, r3, #2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	f003 031e 	and.w	r3, r3, #30
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	e002      	b.n	8002e70 <HAL_ADC_AnalogWDGConfig+0x360>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e7e:	f7fe fd7a 	bl	8001976 <LL_ADC_ConfigAnalogWDThresholds>
                                      tmpAWDLowThresholdShifted);

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_ADC_AnalogWDGConfig+0x410>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d11a      	bne.n	8002ec2 <HAL_ADC_AnalogWDGConfig+0x3b2>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fe3c 	bl	8001b1a <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	7b1b      	ldrb	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_AnalogWDGConfig+0x3a6>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fe5f 	bl	8001b72 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002eb4:	e029      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fe89 	bl	8001bd2 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ec0:	e023      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fe2f 	bl	8001b36 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	7b1b      	ldrb	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_AnalogWDGConfig+0x3dc>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fe54 	bl	8001b92 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002eea:	e00e      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fe7e 	bl	8001bf2 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ef6:	e008      	b.n	8002f0a <HAL_ADC_AnalogWDGConfig+0x3fa>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0017ffff 	.word	0x0017ffff

08002f24 <LL_ADC_IsEnabled>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <LL_ADC_IsEnabled+0x18>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <LL_ADC_IsEnabled+0x1a>
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d101      	bne.n	8002f62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b09f      	sub	sp, #124	; 0x7c
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e093      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ffe:	2300      	movs	r3, #0
 8003000:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a47      	ldr	r2, [pc, #284]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800300c:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e001      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e072      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff87 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 800303c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff81 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d154      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800304e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003050:	2b00      	cmp	r3, #0
 8003052:	d151      	bne.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003056:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02c      	beq.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003072:	035b      	lsls	r3, r3, #13
 8003074:	430b      	orrs	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307c:	4829      	ldr	r0, [pc, #164]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800307e:	f7ff ff51 	bl	8002f24 <LL_ADC_IsEnabled>
 8003082:	4604      	mov	r4, r0
 8003084:	4828      	ldr	r0, [pc, #160]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003086:	f7ff ff4d 	bl	8002f24 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	431c      	orrs	r4, r3
 800308e:	4828      	ldr	r0, [pc, #160]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003090:	f7ff ff48 	bl	8002f24 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	4323      	orrs	r3, r4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d137      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030a4:	f023 030f 	bic.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	6811      	ldr	r1, [r2, #0]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	6892      	ldr	r2, [r2, #8]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b8:	e028      	b.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c6:	4817      	ldr	r0, [pc, #92]	; (8003124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030c8:	f7ff ff2c 	bl	8002f24 <LL_ADC_IsEnabled>
 80030cc:	4604      	mov	r4, r0
 80030ce:	4816      	ldr	r0, [pc, #88]	; (8003128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d0:	f7ff ff28 	bl	8002f24 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	431c      	orrs	r4, r3
 80030d8:	4815      	ldr	r0, [pc, #84]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030da:	f7ff ff23 	bl	8002f24 <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	4323      	orrs	r3, r4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d112      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030ee:	f023 030f 	bic.w	r3, r3, #15
 80030f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030f6:	e009      	b.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800310a:	e000      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800310c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003116:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800311a:	4618      	mov	r0, r3
 800311c:	377c      	adds	r7, #124	; 0x7c
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	50040000 	.word	0x50040000
 8003128:	50040100 	.word	0x50040100
 800312c:	50040300 	.word	0x50040300
 8003130:	50040200 	.word	0x50040200

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff8e 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff29 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff3e 	bl	800317c <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff8e 	bl	8003228 <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5d 	bl	80031d4 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff31 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e054      	b.n	8003414 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7f5b      	ldrb	r3, [r3, #29]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fda6 	bl	8000ecc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_CRC_Init+0xc4>)
 8003394:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0218 	bic.w	r2, r2, #24
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e00c      	b.n	80033c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	461a      	mov	r2, r3
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f834 	bl	8003420 <HAL_CRCEx_Polynomial_Set>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e028      	b.n	8003414 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	795b      	ldrb	r3, [r3, #5]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295
 80033d2:	611a      	str	r2, [r3, #16]
 80033d4:	e004      	b.n	80033e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	04c11db7 	.word	0x04c11db7

08003420 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003430:	231f      	movs	r3, #31
 8003432:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003434:	bf00      	nop
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	613a      	str	r2, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_CRCEx_Polynomial_Set+0x34>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_CRCEx_Polynomial_Set+0x16>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b18      	cmp	r3, #24
 8003458:	d846      	bhi.n	80034e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <HAL_CRCEx_Polynomial_Set+0x40>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	080034ef 	.word	0x080034ef
 8003464:	080034e9 	.word	0x080034e9
 8003468:	080034e9 	.word	0x080034e9
 800346c:	080034e9 	.word	0x080034e9
 8003470:	080034e9 	.word	0x080034e9
 8003474:	080034e9 	.word	0x080034e9
 8003478:	080034e9 	.word	0x080034e9
 800347c:	080034e9 	.word	0x080034e9
 8003480:	080034dd 	.word	0x080034dd
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080034e9 	.word	0x080034e9
 800348c:	080034e9 	.word	0x080034e9
 8003490:	080034e9 	.word	0x080034e9
 8003494:	080034e9 	.word	0x080034e9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034e9 	.word	0x080034e9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034c5 	.word	0x080034c5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d913      	bls.n	80034f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034ce:	e010      	b.n	80034f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b07      	cmp	r3, #7
 80034d4:	d90f      	bls.n	80034f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034da:	e00c      	b.n	80034f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	d90b      	bls.n	80034fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80034e6:	e008      	b.n	80034fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
      break;
 80034ec:	e006      	b.n	80034fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034ee:	bf00      	nop
 80034f0:	e004      	b.n	80034fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034f2:	bf00      	nop
 80034f4:	e002      	b.n	80034fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80034fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 0118 	bic.w	r1, r3, #24
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e098      	b.n	8003670 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_DMA_Init+0x150>)
 8003546:	429a      	cmp	r2, r3
 8003548:	d80f      	bhi.n	800356a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_DMA_Init+0x154>)
 8003552:	4413      	add	r3, r2
 8003554:	4a4b      	ldr	r2, [pc, #300]	; (8003684 <HAL_DMA_Init+0x158>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a48      	ldr	r2, [pc, #288]	; (8003688 <HAL_DMA_Init+0x15c>)
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
 8003568:	e00e      	b.n	8003588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_DMA_Init+0x160>)
 8003572:	4413      	add	r3, r2
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_DMA_Init+0x158>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	009a      	lsls	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a42      	ldr	r2, [pc, #264]	; (8003690 <HAL_DMA_Init+0x164>)
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e2:	d039      	beq.n	8003658 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_DMA_Init+0x15c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d11a      	bne.n	8003624 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_DMA_Init+0x168>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 031c 	and.w	r3, r3, #28
 80035fa:	210f      	movs	r1, #15
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	4924      	ldr	r1, [pc, #144]	; (8003694 <HAL_DMA_Init+0x168>)
 8003604:	4013      	ands	r3, r2
 8003606:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003608:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_DMA_Init+0x168>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f003 031c 	and.w	r3, r3, #28
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	491d      	ldr	r1, [pc, #116]	; (8003694 <HAL_DMA_Init+0x168>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
 8003622:	e019      	b.n	8003658 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_DMA_Init+0x16c>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f003 031c 	and.w	r3, r3, #28
 8003630:	210f      	movs	r1, #15
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	4917      	ldr	r1, [pc, #92]	; (8003698 <HAL_DMA_Init+0x16c>)
 800363a:	4013      	ands	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_DMA_Init+0x16c>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f003 031c 	and.w	r3, r3, #28
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	4911      	ldr	r1, [pc, #68]	; (8003698 <HAL_DMA_Init+0x16c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40020407 	.word	0x40020407
 8003680:	bffdfff8 	.word	0xbffdfff8
 8003684:	cccccccd 	.word	0xcccccccd
 8003688:	40020000 	.word	0x40020000
 800368c:	bffdfbf8 	.word	0xbffdfbf8
 8003690:	40020400 	.word	0x40020400
 8003694:	400200a8 	.word	0x400200a8
 8003698:	400204a8 	.word	0x400204a8

0800369c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2204      	movs	r2, #4
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e022      	b.n	800370c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 020e 	bic.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d005      	beq.n	800373c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2204      	movs	r2, #4
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e029      	b.n	8003790 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020e 	bic.w	r2, r2, #14
 800374a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f003 021c 	and.w	r2, r3, #28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
    }
  }
  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f003 031c 	and.w	r3, r3, #28
 80037ba:	2204      	movs	r2, #4
 80037bc:	409a      	lsls	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d026      	beq.n	8003814 <HAL_DMA_IRQHandler+0x7a>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d021      	beq.n	8003814 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0204 	bic.w	r2, r2, #4
 80037ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f003 021c 	and.w	r2, r3, #28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2104      	movs	r1, #4
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	2b00      	cmp	r3, #0
 8003808:	d071      	beq.n	80038ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003812:	e06c      	b.n	80038ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f003 031c 	and.w	r3, r3, #28
 800381c:	2202      	movs	r2, #2
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02e      	beq.n	8003886 <HAL_DMA_IRQHandler+0xec>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d029      	beq.n	8003886 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 020a 	bic.w	r2, r2, #10
 800384e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f003 021c 	and.w	r2, r3, #28
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2102      	movs	r1, #2
 8003866:	fa01 f202 	lsl.w	r2, r1, r2
 800386a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d038      	beq.n	80038ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003884:	e033      	b.n	80038ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f003 031c 	and.w	r3, r3, #28
 800388e:	2208      	movs	r2, #8
 8003890:	409a      	lsls	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02a      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x156>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d025      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020e 	bic.w	r2, r2, #14
 80038b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	f003 021c 	and.w	r2, r3, #28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	2101      	movs	r1, #1
 80038c2:	fa01 f202 	lsl.w	r2, r1, r2
 80038c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ee:	bf00      	nop
 80038f0:	bf00      	nop
}
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003906:	e17f      	b.n	8003c08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	4013      	ands	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8171 	beq.w	8003c02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d005      	beq.n	8003938 <HAL_GPIO_Init+0x40>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d130      	bne.n	800399a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800396e:	2201      	movs	r2, #1
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0201 	and.w	r2, r3, #1
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d118      	bne.n	80039d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039ac:	2201      	movs	r2, #1
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	08db      	lsrs	r3, r3, #3
 80039c2:	f003 0201 	and.w	r2, r3, #1
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d017      	beq.n	8003a14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d123      	bne.n	8003a68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	08da      	lsrs	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3208      	adds	r2, #8
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80ac 	beq.w	8003c02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aae:	4a5e      	ldr	r2, [pc, #376]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_GPIO_Init+0x330>)
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ac2:	4a5a      	ldr	r2, [pc, #360]	; (8003c2c <HAL_GPIO_Init+0x334>)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	220f      	movs	r2, #15
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aec:	d025      	beq.n	8003b3a <HAL_GPIO_Init+0x242>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4f      	ldr	r2, [pc, #316]	; (8003c30 <HAL_GPIO_Init+0x338>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <HAL_GPIO_Init+0x23e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4e      	ldr	r2, [pc, #312]	; (8003c34 <HAL_GPIO_Init+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d019      	beq.n	8003b32 <HAL_GPIO_Init+0x23a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4d      	ldr	r2, [pc, #308]	; (8003c38 <HAL_GPIO_Init+0x340>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_GPIO_Init+0x236>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4c      	ldr	r2, [pc, #304]	; (8003c3c <HAL_GPIO_Init+0x344>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00d      	beq.n	8003b2a <HAL_GPIO_Init+0x232>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4b      	ldr	r2, [pc, #300]	; (8003c40 <HAL_GPIO_Init+0x348>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <HAL_GPIO_Init+0x22e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	; (8003c44 <HAL_GPIO_Init+0x34c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_GPIO_Init+0x22a>
 8003b1e:	2306      	movs	r3, #6
 8003b20:	e00c      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b22:	2307      	movs	r3, #7
 8003b24:	e00a      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b26:	2305      	movs	r3, #5
 8003b28:	e008      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	e006      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e004      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e002      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_GPIO_Init+0x244>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	f002 0203 	and.w	r2, r2, #3
 8003b42:	0092      	lsls	r2, r2, #2
 8003b44:	4093      	lsls	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b4c:	4937      	ldr	r1, [pc, #220]	; (8003c2c <HAL_GPIO_Init+0x334>)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	3302      	adds	r3, #2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b7e:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_GPIO_Init+0x350>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3301      	adds	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f ae78 	bne.w	8003908 <HAL_GPIO_Init+0x10>
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	48000400 	.word	0x48000400
 8003c34:	48000800 	.word	0x48000800
 8003c38:	48000c00 	.word	0x48000c00
 8003c3c:	48001000 	.word	0x48001000
 8003c40:	48001400 	.word	0x48001400
 8003c44:	48001800 	.word	0x48001800
 8003c48:	40010400 	.word	0x40010400

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c68:	e002      	b.n	8003c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f806 	bl	8003cac <HAL_GPIO_EXTI_Callback>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40010400 	.word	0x40010400

08003cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e081      	b.n	8003dd8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd f90f 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2224      	movs	r2, #36	; 0x24
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	e006      	b.n	8003d4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d104      	bne.n	8003d5c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69d9      	ldr	r1, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d138      	bne.n	8003e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e032      	b.n	8003e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d139      	bne.n	8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e033      	b.n	8003f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2224      	movs	r2, #36	; 0x24
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ec8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e08f      	b.n	8004042 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd f889 	bl	8001054 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d004      	beq.n	8003f64 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f62:	d103      	bne.n	8003f6c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 031e 	bic.w	r3, r3, #30
 8003f6a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d005      	beq.n	8003f84 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003f7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4b31      	ldr	r3, [pc, #196]	; (800404c <HAL_LPTIM_Init+0x13c>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003f94:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003f9a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003fa0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003fa6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d107      	bne.n	8003fc6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d004      	beq.n	8003fd8 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fd6:	d107      	bne.n	8003fe8 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00a      	beq.n	800400a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ffc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004002:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_LPTIM_Init+0x140>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	621a      	str	r2, [r3, #32]
 800402c:	e004      	b.n	8004038 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004036:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	ff19f1fe 	.word	0xff19f1fe
 8004050:	40007c00 	.word	0x40007c00

08004054 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800405c:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_PWR_ConfigPVD+0xb8>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 020e 	bic.w	r2, r3, #14
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4928      	ldr	r1, [pc, #160]	; (800410c <HAL_PWR_ConfigPVD+0xb8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800406e:	4b28      	ldr	r3, [pc, #160]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4a27      	ldr	r2, [pc, #156]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a24      	ldr	r2, [pc, #144]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4a21      	ldr	r2, [pc, #132]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004092:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <HAL_PWR_ConfigPVD+0xbc>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40007000 	.word	0x40007000
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_PWR_EnablePVD+0x1c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_PWR_EnablePVD+0x1c>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6053      	str	r3, [r2, #4]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000

08004134 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_PWREx_GetVoltageRange+0x18>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40007000 	.word	0x40007000

08004160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416e:	d130      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004170:	4b23      	ldr	r3, [pc, #140]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417c:	d038      	beq.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004186:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2232      	movs	r2, #50	; 0x32
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9b      	lsrs	r3, r3, #18
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a4:	e002      	b.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d102      	bne.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f2      	bne.n	80041a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d110      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00f      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d007      	beq.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40007000 	.word	0x40007000
 8004204:	20000000 	.word	0x20000000
 8004208:	431bde83 	.word	0x431bde83

0800420c <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800421c:	f7ff ff8a 	bl	8004134 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004226:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8004234:	f000 f828 	bl	8004288 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800423a:	2208      	movs	r2, #8
 800423c:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800424a:	f000 f824 	bl	8004296 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004250:	2210      	movs	r2, #16
 8004252:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004260:	f000 f820 	bl	80042a4 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8004266:	2220      	movs	r2, #32
 8004268:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8004276:	f000 f81c 	bl	80042b2 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800427a:	4b02      	ldr	r3, [pc, #8]	; (8004284 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800427c:	2240      	movs	r2, #64	; 0x40
 800427e:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40010400 	.word	0x40010400

08004288 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 80042b2:	b480      	push	{r7}
 80042b4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e3c6      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d2:	4ba1      	ldr	r3, [pc, #644]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	4b9e      	ldr	r3, [pc, #632]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80e4 	beq.w	80044bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_RCC_OscConfig+0x4a>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	f040 808b 	bne.w	8004418 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	f040 8087 	bne.w	8004418 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800430a:	4b93      	ldr	r3, [pc, #588]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e39e      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	4b8c      	ldr	r3, [pc, #560]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_RCC_OscConfig+0x7c>
 8004332:	4b89      	ldr	r3, [pc, #548]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433a:	e005      	b.n	8004348 <HAL_RCC_OscConfig+0x88>
 800433c:	4b86      	ldr	r3, [pc, #536]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004348:	4293      	cmp	r3, r2
 800434a:	d223      	bcs.n	8004394 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fd53 	bl	8004dfc <RCC_SetFlashLatencyFromMSIRange>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e37f      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004360:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7c      	ldr	r2, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4977      	ldr	r1, [pc, #476]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437e:	4b76      	ldr	r3, [pc, #472]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	4972      	ldr	r1, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
 8004392:	e025      	b.n	80043e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004394:	4b70      	ldr	r3, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6f      	ldr	r2, [pc, #444]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800439a:	f043 0308 	orr.w	r3, r3, #8
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b6d      	ldr	r3, [pc, #436]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	496a      	ldr	r1, [pc, #424]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b2:	4b69      	ldr	r3, [pc, #420]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	4965      	ldr	r1, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd13 	bl	8004dfc <RCC_SetFlashLatencyFromMSIRange>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e33f      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e0:	f000 fc48 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b5c      	ldr	r3, [pc, #368]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	495a      	ldr	r1, [pc, #360]	; (800455c <HAL_RCC_OscConfig+0x29c>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	4a58      	ldr	r2, [pc, #352]	; (8004560 <HAL_RCC_OscConfig+0x2a0>)
 80043fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004400:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_RCC_OscConfig+0x2a4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd f903 	bl	8001610 <HAL_InitTick>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d052      	beq.n	80044ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	e323      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d032      	beq.n	8004486 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004420:	4b4d      	ldr	r3, [pc, #308]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800442c:	f7fd f940 	bl	80016b0 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004434:	f7fd f93c 	bl	80016b0 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e30c      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004446:	4b44      	ldr	r3, [pc, #272]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004452:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	493b      	ldr	r1, [pc, #236]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004470:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	4936      	ldr	r1, [pc, #216]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
 8004484:	e01a      	b.n	80044bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004486:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a33      	ldr	r2, [pc, #204]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004492:	f7fd f90d 	bl	80016b0 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800449a:	f7fd f909 	bl	80016b0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e2d9      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <HAL_RCC_OscConfig+0x1da>
 80044b8:	e000      	b.n	80044bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d074      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x21a>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d10e      	bne.n	80044f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d10b      	bne.n	80044f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d064      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2f0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d160      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e2b6      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x24a>
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e01d      	b.n	8004546 <HAL_RCC_OscConfig+0x286>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004512:	d10c      	bne.n	800452e <HAL_RCC_OscConfig+0x26e>
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800451a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e00b      	b.n	8004546 <HAL_RCC_OscConfig+0x286>
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a06      	ldr	r2, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x298>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01c      	beq.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fd f8af 	bl	80016b0 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004554:	e011      	b.n	800457a <HAL_RCC_OscConfig+0x2ba>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	08007b4c 	.word	0x08007b4c
 8004560:	20000000 	.word	0x20000000
 8004564:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fd f8a2 	bl	80016b0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e272      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457a:	4baf      	ldr	r3, [pc, #700]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x2a8>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd f892 	bl	80016b0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fd f88e 	bl	80016b0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e25e      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045a2:	4ba5      	ldr	r3, [pc, #660]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d0>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d060      	beq.n	8004680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x310>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d119      	bne.n	80045fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d116      	bne.n	80045fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d0:	4b99      	ldr	r3, [pc, #612]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_OscConfig+0x328>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e23b      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b93      	ldr	r3, [pc, #588]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	4990      	ldr	r1, [pc, #576]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045fc:	e040      	b.n	8004680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d023      	beq.n	800464e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004606:	4b8c      	ldr	r3, [pc, #560]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a8b      	ldr	r2, [pc, #556]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fd f84d 	bl	80016b0 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461a:	f7fd f849 	bl	80016b0 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e219      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462c:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	497c      	ldr	r1, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
 800464c:	e018      	b.n	8004680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464e:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a79      	ldr	r2, [pc, #484]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fd f829 	bl	80016b0 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004662:	f7fd f825 	bl	80016b0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1f5      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004674:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03c      	beq.n	8004706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01c      	beq.n	80046ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004694:	4b68      	ldr	r3, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	4a67      	ldr	r2, [pc, #412]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd f804 	bl	80016b0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ac:	f7fd f800 	bl	80016b0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1d0      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80046c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0ef      	beq.n	80046ac <HAL_RCC_OscConfig+0x3ec>
 80046cc:	e01b      	b.n	8004706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ce:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fc ffe7 	bl	80016b0 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e6:	f7fc ffe3 	bl	80016b0 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e1b3      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f8:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ef      	bne.n	80046e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80a6 	beq.w	8004860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004718:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4a43      	ldr	r2, [pc, #268]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_OscConfig+0x57c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d118      	bne.n	800477e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x57c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3a      	ldr	r2, [pc, #232]	; (800483c <HAL_RCC_OscConfig+0x57c>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004758:	f7fc ffaa 	bl	80016b0 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7fc ffa6 	bl	80016b0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e176      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_RCC_OscConfig+0x57c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_RCC_OscConfig+0x4d8>
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004796:	e024      	b.n	80047e2 <HAL_RCC_OscConfig+0x522>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b05      	cmp	r3, #5
 800479e:	d110      	bne.n	80047c2 <HAL_RCC_OscConfig+0x502>
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a24      	ldr	r2, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047a8:	f043 0304 	orr.w	r3, r3, #4
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c0:	e00f      	b.n	80047e2 <HAL_RCC_OscConfig+0x522>
 80047c2:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 80047da:	f023 0304 	bic.w	r3, r3, #4
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ea:	f7fc ff61 	bl	80016b0 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fc ff5d 	bl	80016b0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e12b      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x578>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ed      	beq.n	80047f2 <HAL_RCC_OscConfig+0x532>
 8004816:	e01a      	b.n	800484e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fc ff4a 	bl	80016b0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481e:	e00f      	b.n	8004840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc ff46 	bl	80016b0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d906      	bls.n	8004840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e114      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004840:	4b89      	ldr	r3, [pc, #548]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e8      	bne.n	8004820 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484e:	7ffb      	ldrb	r3, [r7, #31]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b84      	ldr	r3, [pc, #528]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	4a83      	ldr	r2, [pc, #524]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80fa 	beq.w	8004a5e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	2b02      	cmp	r3, #2
 8004870:	f040 80d0 	bne.w	8004a14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004874:	4b7c      	ldr	r3, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0203 	and.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d130      	bne.n	80048ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	3b01      	subs	r3, #1
 8004894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d127      	bne.n	80048ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d11f      	bne.n	80048ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b4:	2a07      	cmp	r2, #7
 80048b6:	bf14      	ite	ne
 80048b8:	2201      	movne	r2, #1
 80048ba:	2200      	moveq	r2, #0
 80048bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048be:	4293      	cmp	r3, r2
 80048c0:	d113      	bne.n	80048ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	3b01      	subs	r3, #1
 80048e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d06e      	beq.n	80049c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	d069      	beq.n	80049c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048f0:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048fc:	4b5a      	ldr	r3, [pc, #360]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0a9      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800490c:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a55      	ldr	r2, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004918:	f7fc feca 	bl	80016b0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fec6 	bl	80016b0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e096      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004932:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800493e:	4b4a      	ldr	r3, [pc, #296]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <HAL_RCC_OscConfig+0x7ac>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800494e:	3a01      	subs	r2, #1
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004958:	0212      	lsls	r2, r2, #8
 800495a:	4311      	orrs	r1, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004960:	0852      	lsrs	r2, r2, #1
 8004962:	3a01      	subs	r2, #1
 8004964:	0552      	lsls	r2, r2, #21
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0652      	lsls	r2, r2, #25
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004978:	0912      	lsrs	r2, r2, #4
 800497a:	0452      	lsls	r2, r2, #17
 800497c:	430a      	orrs	r2, r1
 800497e:	493a      	ldr	r1, [pc, #232]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004984:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a37      	ldr	r2, [pc, #220]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 800498a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004990:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a34      	ldr	r2, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800499c:	f7fc fe88 	bl	80016b0 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fc fe84 	bl	80016b0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e054      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049c2:	e04c      	b.n	8004a5e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e04b      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d144      	bne.n	8004a5e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049ec:	f7fc fe60 	bl	80016b0 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fc fe5c 	bl	80016b0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e02c      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x734>
 8004a12:	e024      	b.n	8004a5e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d01f      	beq.n	8004a5a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fc fe43 	bl	80016b0 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fc fe3f 	bl	80016b0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e00f      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f0      	bne.n	8004a2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	4905      	ldr	r1, [pc, #20]	; (8004a68 <HAL_RCC_OscConfig+0x7a8>)
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_RCC_OscConfig+0x7b0>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	60cb      	str	r3, [r1, #12]
 8004a58:	e001      	b.n	8004a5e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	f99d808c 	.word	0xf99d808c
 8004a70:	feeefffc 	.word	0xfeeefffc

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0e7      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b75      	ldr	r3, [pc, #468]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d910      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	4970      	ldr	r1, [pc, #448]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b6e      	ldr	r3, [pc, #440]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0cf      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b66      	ldr	r3, [pc, #408]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d908      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b63      	ldr	r3, [pc, #396]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4960      	ldr	r1, [pc, #384]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04c      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004afa:	4b5a      	ldr	r3, [pc, #360]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d121      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0a6      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d115      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e09a      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e08e      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e086      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4943      	ldr	r1, [pc, #268]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fc fda8 	bl	80016b0 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fc fda4 	bl	80016b0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e06e      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d208      	bcs.n	8004bba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	492b      	ldr	r1, [pc, #172]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d210      	bcs.n	8004bea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	4923      	ldr	r1, [pc, #140]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <HAL_RCC_ClockConfig+0x1ec>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e036      	b.n	8004c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	4918      	ldr	r1, [pc, #96]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4910      	ldr	r1, [pc, #64]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c28:	f000 f824 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	490b      	ldr	r1, [pc, #44]	; (8004c68 <HAL_RCC_ClockConfig+0x1f4>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1f8>)
 8004c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_ClockConfig+0x1fc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fc fcdf 	bl	8001610 <HAL_InitTick>
 8004c52:	4603      	mov	r3, r0
 8004c54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	08007b4c 	.word	0x08007b4c
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c82:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d121      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11e      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ca8:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cd0:	4a2b      	ldr	r2, [pc, #172]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e004      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf8:	4b23      	ldr	r3, [pc, #140]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d134      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d003      	beq.n	8004d1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d003      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0xac>
 8004d18:	e005      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d1c:	617b      	str	r3, [r7, #20]
      break;
 8004d1e:	e005      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d22:	617b      	str	r3, [r7, #20]
      break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	617b      	str	r3, [r7, #20]
      break;
 8004d2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	3301      	adds	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	fb02 f203 	mul.w	r2, r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	0e5b      	lsrs	r3, r3, #25
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	08007b64 	.word	0x08007b64
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000000 	.word	0x20000000

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4904      	ldr	r1, [pc, #16]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	08007b5c 	.word	0x08007b5c

08004dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dd4:	f7ff ffda 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0adb      	lsrs	r3, r3, #11
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4904      	ldr	r1, [pc, #16]	; (8004df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	08007b5c 	.word	0x08007b5c

08004dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e08:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e14:	f7ff f996 	bl	8004144 <HAL_PWREx_GetVoltageRange>
 8004e18:	6178      	str	r0, [r7, #20]
 8004e1a:	e014      	b.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6593      	str	r3, [r2, #88]	; 0x58
 8004e28:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e34:	f7ff f986 	bl	8004144 <HAL_PWREx_GetVoltageRange>
 8004e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d10b      	bne.n	8004e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d919      	bls.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2ba0      	cmp	r3, #160	; 0xa0
 8004e58:	d902      	bls.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e013      	b.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e60:	2301      	movs	r3, #1
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	e010      	b.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d902      	bls.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e00a      	b.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d102      	bne.n	8004e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e78:	2302      	movs	r3, #2
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e004      	b.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d101      	bne.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e84:	2301      	movs	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 0207 	bic.w	r2, r3, #7
 8004e90:	4909      	ldr	r1, [pc, #36]	; (8004eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d001      	beq.n	8004eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40022000 	.word	0x40022000

08004ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ec8:	2300      	movs	r3, #0
 8004eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d041      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee0:	d02a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee6:	d824      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eec:	d008      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef2:	d81e      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efc:	d010      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004efe:	e018      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f00:	4b86      	ldr	r3, [pc, #536]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a85      	ldr	r2, [pc, #532]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f0c:	e015      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fabb 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f1e:	e00c      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3320      	adds	r3, #32
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fba6 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	74fb      	strb	r3, [r7, #19]
      break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f40:	4b76      	ldr	r3, [pc, #472]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4e:	4973      	ldr	r1, [pc, #460]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d041      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f70:	d02a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f76:	d824      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f7c:	d008      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f82:	d81e      	bhi.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f8c:	d010      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f8e:	e018      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f90:	4b62      	ldr	r3, [pc, #392]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a61      	ldr	r2, [pc, #388]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f9c:	e015      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa73 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fae:	e00c      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3320      	adds	r3, #32
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fb5e 	bl	8005678 <RCCEx_PLLSAI2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fc6:	e000      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fd0:	4b52      	ldr	r3, [pc, #328]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fde:	494f      	ldr	r1, [pc, #316]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fe6:	e001      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a0 	beq.w	800513a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005014:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501e:	6593      	str	r3, [r2, #88]	; 0x58
 8005020:	4b3e      	ldr	r3, [pc, #248]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502c:	2301      	movs	r3, #1
 800502e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005030:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3a      	ldr	r2, [pc, #232]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503c:	f7fc fb38 	bl	80016b0 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005042:	e009      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fc fb34 	bl	80016b0 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d902      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	74fb      	strb	r3, [r7, #19]
        break;
 8005056:	e005      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005058:	4b31      	ldr	r3, [pc, #196]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ef      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d15c      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d019      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005088:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fc faf3 	bl	80016b0 <HAL_GetTick>
 80050ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050cc:	e00b      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fc faef 	bl	80016b0 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d902      	bls.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	74fb      	strb	r3, [r7, #19]
            break;
 80050e4:	e006      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ec      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10c      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	4904      	ldr	r1, [pc, #16]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005112:	e009      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	74bb      	strb	r3, [r7, #18]
 8005118:	e006      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005128:	7c7b      	ldrb	r3, [r7, #17]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512e:	4b9e      	ldr	r3, [pc, #632]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	4a9d      	ldr	r2, [pc, #628]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005146:	4b98      	ldr	r3, [pc, #608]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f023 0203 	bic.w	r2, r3, #3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	4994      	ldr	r1, [pc, #592]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005168:	4b8f      	ldr	r3, [pc, #572]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 020c 	bic.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	498c      	ldr	r1, [pc, #560]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800518a:	4b87      	ldr	r3, [pc, #540]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	4983      	ldr	r1, [pc, #524]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051ac:	4b7e      	ldr	r3, [pc, #504]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	497b      	ldr	r1, [pc, #492]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ce:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	4972      	ldr	r1, [pc, #456]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051f0:	4b6d      	ldr	r3, [pc, #436]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	496a      	ldr	r1, [pc, #424]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005212:	4b65      	ldr	r3, [pc, #404]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	4961      	ldr	r1, [pc, #388]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005234:	4b5c      	ldr	r3, [pc, #368]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005242:	4959      	ldr	r1, [pc, #356]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005256:	4b54      	ldr	r3, [pc, #336]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005264:	4950      	ldr	r1, [pc, #320]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005278:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	4948      	ldr	r1, [pc, #288]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800529a:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	493f      	ldr	r1, [pc, #252]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d028      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ca:	4937      	ldr	r1, [pc, #220]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052da:	d106      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052dc:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a31      	ldr	r2, [pc, #196]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e6:	60d3      	str	r3, [r2, #12]
 80052e8:	e011      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f2:	d10c      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	2101      	movs	r1, #1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f8c8 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d028      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	491f      	ldr	r1, [pc, #124]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005338:	d106      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005344:	60d3      	str	r3, [r2, #12]
 8005346:	e011      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005350:	d10c      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	2101      	movs	r1, #1
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f899 	bl	8005490 <RCCEx_PLLSAI1_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d02b      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	4908      	ldr	r1, [pc, #32]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005396:	d109      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a02      	ldr	r2, [pc, #8]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a2:	60d3      	str	r3, [r2, #12]
 80053a4:	e014      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053a6:	bf00      	nop
 80053a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3304      	adds	r3, #4
 80053ba:	2101      	movs	r1, #1
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f867 	bl	8005490 <RCCEx_PLLSAI1_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02f      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ea:	4928      	ldr	r1, [pc, #160]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053fa:	d10d      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3304      	adds	r3, #4
 8005400:	2102      	movs	r1, #2
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f844 	bl	8005490 <RCCEx_PLLSAI1_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d014      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	74bb      	strb	r3, [r7, #18]
 8005416:	e011      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005420:	d10c      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3320      	adds	r3, #32
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f925 	bl	8005678 <RCCEx_PLLSAI2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005456:	490d      	ldr	r1, [pc, #52]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	4904      	ldr	r1, [pc, #16]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005482:	7cbb      	ldrb	r3, [r7, #18]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000

08005490 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800549e:	4b75      	ldr	r3, [pc, #468]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d018      	beq.n	80054dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054aa:	4b72      	ldr	r3, [pc, #456]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0203 	and.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10d      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
       ||
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054c2:	4b6c      	ldr	r3, [pc, #432]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
       ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d047      	beq.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
 80054da:	e044      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d018      	beq.n	8005516 <RCCEx_PLLSAI1_Config+0x86>
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d825      	bhi.n	8005534 <RCCEx_PLLSAI1_Config+0xa4>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <RCCEx_PLLSAI1_Config+0x62>
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d009      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0x74>
 80054f0:	e020      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054f2:	4b60      	ldr	r3, [pc, #384]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11d      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005502:	e01a      	b.n	800553a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d116      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005514:	e013      	b.n	800553e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005516:	4b57      	ldr	r3, [pc, #348]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005522:	4b54      	ldr	r3, [pc, #336]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005532:	e006      	b.n	8005542 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	e004      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005542:	bf00      	nop
    }

    if(status == HAL_OK)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800554a:	4b4a      	ldr	r3, [pc, #296]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	430b      	orrs	r3, r1
 8005560:	4944      	ldr	r1, [pc, #272]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d17d      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800556c:	4b41      	ldr	r3, [pc, #260]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a40      	ldr	r2, [pc, #256]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fc f89a 	bl	80016b0 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800557e:	e009      	b.n	8005594 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005580:	f7fc f896 	bl	80016b0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d902      	bls.n	8005594 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	73fb      	strb	r3, [r7, #15]
        break;
 8005592:	e005      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ef      	bne.n	8005580 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d160      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	0211      	lsls	r1, r2, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	0912      	lsrs	r2, r2, #4
 80055c4:	0452      	lsls	r2, r2, #17
 80055c6:	430a      	orrs	r2, r1
 80055c8:	492a      	ldr	r1, [pc, #168]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
 80055ce:	e027      	b.n	8005620 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d112      	bne.n	80055fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	0211      	lsls	r1, r2, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6912      	ldr	r2, [r2, #16]
 80055ec:	0852      	lsrs	r2, r2, #1
 80055ee:	3a01      	subs	r2, #1
 80055f0:	0552      	lsls	r2, r2, #21
 80055f2:	430a      	orrs	r2, r1
 80055f4:	491f      	ldr	r1, [pc, #124]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]
 80055fa:	e011      	b.n	8005620 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6952      	ldr	r2, [r2, #20]
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0652      	lsls	r2, r2, #25
 8005618:	430a      	orrs	r2, r1
 800561a:	4916      	ldr	r1, [pc, #88]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800562a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fc f840 	bl	80016b0 <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005632:	e009      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005634:	f7fc f83c 	bl	80016b0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
          break;
 8005646:	e005      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	4904      	ldr	r1, [pc, #16]	; (8005674 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000

08005678 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005686:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005692:	4b67      	ldr	r3, [pc, #412]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0203 	and.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d10d      	bne.n	80056be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
       ||
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056aa:	4b61      	ldr	r3, [pc, #388]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
       ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d047      	beq.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	e044      	b.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d018      	beq.n	80056fe <RCCEx_PLLSAI2_Config+0x86>
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d825      	bhi.n	800571c <RCCEx_PLLSAI2_Config+0xa4>
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <RCCEx_PLLSAI2_Config+0x62>
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d009      	beq.n	80056ec <RCCEx_PLLSAI2_Config+0x74>
 80056d8:	e020      	b.n	800571c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056da:	4b55      	ldr	r3, [pc, #340]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11d      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ea:	e01a      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ec:	4b50      	ldr	r3, [pc, #320]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d116      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e013      	b.n	8005726 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fe:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10f      	bne.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800570a:	4b49      	ldr	r3, [pc, #292]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571a:	e006      	b.n	800572a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e004      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800572a:	bf00      	nop
    }

    if(status == HAL_OK)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6819      	ldr	r1, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	3b01      	subs	r3, #1
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	430b      	orrs	r3, r1
 8005748:	4939      	ldr	r1, [pc, #228]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d167      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005754:	4b36      	ldr	r3, [pc, #216]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fb ffa6 	bl	80016b0 <HAL_GetTick>
 8005764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005766:	e009      	b.n	800577c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005768:	f7fb ffa2 	bl	80016b0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d902      	bls.n	800577c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	73fb      	strb	r3, [r7, #15]
        break;
 800577a:	e005      	b.n	8005788 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800577c:	4b2c      	ldr	r3, [pc, #176]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ef      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d14a      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d111      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005794:	4b26      	ldr	r3, [pc, #152]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	0211      	lsls	r1, r2, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	0912      	lsrs	r2, r2, #4
 80057ac:	0452      	lsls	r2, r2, #17
 80057ae:	430a      	orrs	r2, r1
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	614b      	str	r3, [r1, #20]
 80057b6:	e011      	b.n	80057dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b8:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6912      	ldr	r2, [r2, #16]
 80057ce:	0852      	lsrs	r2, r2, #1
 80057d0:	3a01      	subs	r2, #1
 80057d2:	0652      	lsls	r2, r2, #25
 80057d4:	430a      	orrs	r2, r1
 80057d6:	4916      	ldr	r1, [pc, #88]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057dc:	4b14      	ldr	r3, [pc, #80]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fb ff62 	bl	80016b0 <HAL_GetTick>
 80057ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ee:	e009      	b.n	8005804 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057f0:	f7fb ff5e 	bl	80016b0 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d902      	bls.n	8005804 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	73fb      	strb	r3, [r7, #15]
          break;
 8005802:	e005      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4904      	ldr	r1, [pc, #16]	; (8005830 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e095      	b.n	8005972 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b00      	cmp	r3, #0
 800584c:	d108      	bne.n	8005860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005856:	d009      	beq.n	800586c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	61da      	str	r2, [r3, #28]
 800585e:	e005      	b.n	800586c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fc18 	bl	80010bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ac:	d902      	bls.n	80058b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e002      	b.n	80058ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_Init+0xa0>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058cc:	d002      	beq.n	80058d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	ea42 0103 	orr.w	r1, r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	f003 0204 	and.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005950:	ea42 0103 	orr.w	r1, r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e049      	b.n	8005a20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fb fc33 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f000 fb2b 	bl	8006014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e049      	b.n	8005ace <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f841 	bl	8005ad6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fad4 	bl	8006014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d122      	bne.n	8005b46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d11b      	bne.n	8005b46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0202 	mvn.w	r2, #2
 8005b16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa52 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005b32:	e005      	b.n	8005b40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa44 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa55 	bl	8005fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d122      	bne.n	8005b9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d11b      	bne.n	8005b9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f06f 0204 	mvn.w	r2, #4
 8005b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa28 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005b86:	e005      	b.n	8005b94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa1a 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa2b 	bl	8005fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d122      	bne.n	8005bee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0208 	mvn.w	r2, #8
 8005bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f9fe 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005bda:	e005      	b.n	8005be8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f9f0 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa01 	bl	8005fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d122      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d11b      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f06f 0210 	mvn.w	r2, #16
 8005c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2208      	movs	r2, #8
 8005c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9d4 	bl	8005fd6 <HAL_TIM_IC_CaptureCallback>
 8005c2e:	e005      	b.n	8005c3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9c6 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9d7 	bl	8005fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10e      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f06f 0201 	mvn.w	r2, #1
 8005c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f9a0 	bl	8005fae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d10e      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d107      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fed7 	bl	8006a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 feca 	bl	8006a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b40      	cmp	r3, #64	; 0x40
 8005cd4:	d10e      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d107      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f985 	bl	8005ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d10e      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d107      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0220 	mvn.w	r2, #32
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fe8a 	bl	8006a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e066      	b.n	8005e14 <HAL_TIM_OC_ConfigChannel+0xec>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b14      	cmp	r3, #20
 8005d52:	d857      	bhi.n	8005e04 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005db1 	.word	0x08005db1
 8005d60:	08005e05 	.word	0x08005e05
 8005d64:	08005e05 	.word	0x08005e05
 8005d68:	08005e05 	.word	0x08005e05
 8005d6c:	08005dbf 	.word	0x08005dbf
 8005d70:	08005e05 	.word	0x08005e05
 8005d74:	08005e05 	.word	0x08005e05
 8005d78:	08005e05 	.word	0x08005e05
 8005d7c:	08005dcd 	.word	0x08005dcd
 8005d80:	08005e05 	.word	0x08005e05
 8005d84:	08005e05 	.word	0x08005e05
 8005d88:	08005e05 	.word	0x08005e05
 8005d8c:	08005ddb 	.word	0x08005ddb
 8005d90:	08005e05 	.word	0x08005e05
 8005d94:	08005e05 	.word	0x08005e05
 8005d98:	08005e05 	.word	0x08005e05
 8005d9c:	08005de9 	.word	0x08005de9
 8005da0:	08005e05 	.word	0x08005e05
 8005da4:	08005e05 	.word	0x08005e05
 8005da8:	08005e05 	.word	0x08005e05
 8005dac:	08005df7 	.word	0x08005df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f9c6 	bl	8006148 <TIM_OC1_SetConfig>
      break;
 8005dbc:	e025      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fa4f 	bl	8006268 <TIM_OC2_SetConfig>
      break;
 8005dca:	e01e      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fad2 	bl	800637c <TIM_OC3_SetConfig>
      break;
 8005dd8:	e017      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fb53 	bl	800648c <TIM_OC4_SetConfig>
      break;
 8005de6:	e010      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fbb6 	bl	8006560 <TIM_OC5_SetConfig>
      break;
 8005df4:	e009      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fc13 	bl	8006628 <TIM_OC6_SetConfig>
      break;
 8005e02:	e002      	b.n	8005e0a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
      break;
 8005e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_ConfigClockSource+0x1c>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0b6      	b.n	8005fa6 <HAL_TIM_ConfigClockSource+0x18a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e74:	d03e      	beq.n	8005ef4 <HAL_TIM_ConfigClockSource+0xd8>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	f200 8087 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_TIM_ConfigClockSource+0x176>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d87f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d01a      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0xaa>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d87b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d050      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x11e>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d877      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005e9c:	2b50      	cmp	r3, #80	; 0x50
 8005e9e:	d03c      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0xfe>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d873      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d058      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x13e>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d86f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d064      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15e>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d86b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d060      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15e>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d867      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05c      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15e>
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d05a      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x15e>
 8005ec4:	e062      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f000 fc87 	bl	80067e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
      break;
 8005ef2:	e04f      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f000 fc70 	bl	80067e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f16:	609a      	str	r2, [r3, #8]
      break;
 8005f18:	e03c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 fbe4 	bl	80066f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2150      	movs	r1, #80	; 0x50
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fc3d 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f38:	e02c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 fc03 	bl	8006752 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2160      	movs	r1, #96	; 0x60
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fc2d 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f58:	e01c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f000 fbc4 	bl	80066f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2140      	movs	r1, #64	; 0x40
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fc1d 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f78:	e00c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f000 fc14 	bl	80067b2 <TIM_ITRx_SetConfig>
      break;
 8005f8a:	e003      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e000      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a40      	ldr	r2, [pc, #256]	; (8006128 <TIM_Base_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d00f      	beq.n	8006054 <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3d      	ldr	r2, [pc, #244]	; (800612c <TIM_Base_SetConfig+0x118>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00b      	beq.n	8006054 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a3c      	ldr	r2, [pc, #240]	; (8006130 <TIM_Base_SetConfig+0x11c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d007      	beq.n	8006054 <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3b      	ldr	r2, [pc, #236]	; (8006134 <TIM_Base_SetConfig+0x120>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3a      	ldr	r2, [pc, #232]	; (8006138 <TIM_Base_SetConfig+0x124>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d108      	bne.n	8006066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2f      	ldr	r2, [pc, #188]	; (8006128 <TIM_Base_SetConfig+0x114>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01f      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d01b      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2c      	ldr	r2, [pc, #176]	; (800612c <TIM_Base_SetConfig+0x118>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d017      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2b      	ldr	r2, [pc, #172]	; (8006130 <TIM_Base_SetConfig+0x11c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <TIM_Base_SetConfig+0x120>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00f      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a29      	ldr	r2, [pc, #164]	; (8006138 <TIM_Base_SetConfig+0x124>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a28      	ldr	r2, [pc, #160]	; (800613c <TIM_Base_SetConfig+0x128>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <TIM_Base_SetConfig+0x12c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a26      	ldr	r2, [pc, #152]	; (8006144 <TIM_Base_SetConfig+0x130>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d108      	bne.n	80060c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a10      	ldr	r2, [pc, #64]	; (8006128 <TIM_Base_SetConfig+0x114>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_Base_SetConfig+0xf8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a12      	ldr	r2, [pc, #72]	; (8006138 <TIM_Base_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a11      	ldr	r2, [pc, #68]	; (800613c <TIM_Base_SetConfig+0x128>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a10      	ldr	r2, [pc, #64]	; (8006140 <TIM_Base_SetConfig+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a0f      	ldr	r2, [pc, #60]	; (8006144 <TIM_Base_SetConfig+0x130>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d103      	bne.n	8006114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	615a      	str	r2, [r3, #20]
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40013400 	.word	0x40013400
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400
 8006144:	40014800 	.word	0x40014800

08006148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f023 0201 	bic.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 0302 	bic.w	r3, r3, #2
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <TIM_OC1_SetConfig+0x10c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00f      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <TIM_OC1_SetConfig+0x110>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a2a      	ldr	r2, [pc, #168]	; (800625c <TIM_OC1_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a29      	ldr	r2, [pc, #164]	; (8006260 <TIM_OC1_SetConfig+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC1_SetConfig+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a28      	ldr	r2, [pc, #160]	; (8006264 <TIM_OC1_SetConfig+0x11c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10c      	bne.n	80061e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0308 	bic.w	r3, r3, #8
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <TIM_OC1_SetConfig+0x10c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00f      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <TIM_OC1_SetConfig+0x110>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <TIM_OC1_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a18      	ldr	r2, [pc, #96]	; (8006260 <TIM_OC1_SetConfig+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC1_SetConfig+0xc2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a17      	ldr	r2, [pc, #92]	; (8006264 <TIM_OC1_SetConfig+0x11c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d111      	bne.n	800622e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0210 	bic.w	r2, r3, #16
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a28      	ldr	r2, [pc, #160]	; (8006368 <TIM_OC2_SetConfig+0x100>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC2_SetConfig+0x6c>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a27      	ldr	r2, [pc, #156]	; (800636c <TIM_OC2_SetConfig+0x104>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10d      	bne.n	80062f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <TIM_OC2_SetConfig+0x100>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	; (800636c <TIM_OC2_SetConfig+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <TIM_OC2_SetConfig+0x108>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <TIM_OC2_SetConfig+0x10c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC2_SetConfig+0xb0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a19      	ldr	r2, [pc, #100]	; (8006378 <TIM_OC2_SetConfig+0x110>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d113      	bne.n	8006340 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40013400 	.word	0x40013400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800

0800637c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0303 	bic.w	r3, r3, #3
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a27      	ldr	r2, [pc, #156]	; (8006478 <TIM_OC3_SetConfig+0xfc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC3_SetConfig+0x6a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a26      	ldr	r2, [pc, #152]	; (800647c <TIM_OC3_SetConfig+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10d      	bne.n	8006402 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <TIM_OC3_SetConfig+0xfc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1b      	ldr	r2, [pc, #108]	; (800647c <TIM_OC3_SetConfig+0x100>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <TIM_OC3_SetConfig+0x104>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <TIM_OC3_SetConfig+0x108>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC3_SetConfig+0xae>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <TIM_OC3_SetConfig+0x10c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d113      	bne.n	8006452 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	621a      	str	r2, [r3, #32]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800

0800648c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <TIM_OC4_SetConfig+0xc0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <TIM_OC4_SetConfig+0xc4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a16      	ldr	r2, [pc, #88]	; (8006554 <TIM_OC4_SetConfig+0xc8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <TIM_OC4_SetConfig+0xcc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC4_SetConfig+0x84>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <TIM_OC4_SetConfig+0xd0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	019b      	lsls	r3, r3, #6
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a17      	ldr	r2, [pc, #92]	; (8006614 <TIM_OC5_SetConfig+0xb4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a16      	ldr	r2, [pc, #88]	; (8006618 <TIM_OC5_SetConfig+0xb8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a15      	ldr	r2, [pc, #84]	; (800661c <TIM_OC5_SetConfig+0xbc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <TIM_OC5_SetConfig+0xc0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC5_SetConfig+0x7a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <TIM_OC5_SetConfig+0xc4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d109      	bne.n	80065ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800666e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	051b      	lsls	r3, r3, #20
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_OC6_SetConfig+0xb8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <TIM_OC6_SetConfig+0xbc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <TIM_OC6_SetConfig+0xc0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <TIM_OC6_SetConfig+0xc4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC6_SetConfig+0x7c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a14      	ldr	r2, [pc, #80]	; (80066f0 <TIM_OC6_SetConfig+0xc8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d109      	bne.n	80066b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	029b      	lsls	r3, r3, #10
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800

080066f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0201 	bic.w	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 030a 	bic.w	r3, r3, #10
 8006730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006752:	b480      	push	{r7}
 8006754:	b087      	sub	sp, #28
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f023 0210 	bic.w	r2, r3, #16
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800677c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800678e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f043 0307 	orr.w	r3, r3, #7
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	021a      	lsls	r2, r3, #8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	431a      	orrs	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4313      	orrs	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800683c:	2302      	movs	r3, #2
 800683e:	e068      	b.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2e      	ldr	r2, [pc, #184]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a2d      	ldr	r2, [pc, #180]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d108      	bne.n	8006886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800687a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01d      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d018      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1a      	ldr	r2, [pc, #104]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a18      	ldr	r2, [pc, #96]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a13      	ldr	r2, [pc, #76]	; (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a14      	ldr	r2, [pc, #80]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d10c      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40012c00 	.word	0x40012c00
 8006924:	40013400 	.word	0x40013400
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000

08006938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006950:	2302      	movs	r3, #2
 8006952:	e065      	b.n	8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d115      	bne.n	8006a0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40013400 	.word	0x40013400

08006a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e040      	b.n	8006b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fa fc32 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fb2e 	bl	8007110 <UART_SetConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fdac 	bl	8007624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fe33 	bl	8007768 <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b0ba      	sub	sp, #232	; 0xe8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d115      	bne.n	8006b74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00f      	beq.n	8006b74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 82a6 	beq.w	80070b6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
      }
      return;
 8006b72:	e2a0      	b.n	80070b6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8117 	beq.w	8006dac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b8e:	4b85      	ldr	r3, [pc, #532]	; (8006da4 <HAL_UART_IRQHandler+0x298>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 810a 	beq.w	8006dac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d011      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xbc>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2202      	movs	r2, #2
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	f043 0204 	orr.w	r2, r3, #4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d011      	beq.n	8006c28 <HAL_UART_IRQHandler+0x11c>
 8006c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2204      	movs	r2, #4
 8006c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1e:	f043 0202 	orr.w	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	f043 0208 	orr.w	r2, r3, #8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <HAL_UART_IRQHandler+0x18a>
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8c:	f043 0220 	orr.w	r2, r3, #32
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 820c 	beq.w	80070ba <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d04f      	beq.n	8006d8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fe47 	bl	8007982 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d141      	bne.n	8006d86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3308      	adds	r3, #8
 8006d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1d9      	bne.n	8006d02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d013      	beq.n	8006d7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <HAL_UART_IRQHandler+0x29c>)
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fc fcd8 	bl	8003718 <HAL_DMA_Abort_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	e00f      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9b0 	bl	80070e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	e00b      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f9ac 	bl	80070e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	e007      	b.n	8006d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9a8 	bl	80070e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d9c:	e18d      	b.n	80070ba <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9e:	bf00      	nop
    return;
 8006da0:	e18b      	b.n	80070ba <HAL_UART_IRQHandler+0x5ae>
 8006da2:	bf00      	nop
 8006da4:	04000120 	.word	0x04000120
 8006da8:	08007a49 	.word	0x08007a49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 8146 	bne.w	8007042 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 813f 	beq.w	8007042 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8138 	beq.w	8007042 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	f040 80b4 	bne.w	8006f52 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006df6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 815f 	beq.w	80070be <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	f080 8157 	bcs.w	80070be <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 8085 	bne.w	8006f36 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1da      	bne.n	8006e2c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e1      	bne.n	8006e76 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ed6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ed8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006edc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e3      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f18:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e4      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fc fbb3 	bl	800369c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8d4 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f50:	e0b5      	b.n	80070be <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80a7 	beq.w	80070c2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80a2 	beq.w	80070c2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e4      	bne.n	8006f7e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fd8:	633a      	str	r2, [r7, #48]	; 0x30
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e3      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	60fb      	str	r3, [r7, #12]
   return(result);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0310 	bic.w	r3, r3, #16
 8007012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	69b9      	ldr	r1, [r7, #24]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	617b      	str	r3, [r7, #20]
   return(result);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f85c 	bl	80070f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007040:	e03f      	b.n	80070c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <HAL_UART_IRQHandler+0x560>
 800704e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd2f 	bl	8007ac8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800706a:	e02d      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800706c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00e      	beq.n	8007096 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01c      	beq.n	80070c6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
    }
    return;
 8007094:	e017      	b.n	80070c6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d012      	beq.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fce0 	bl	8007a74 <UART_EndTransmit_IT>
    return;
 80070b4:	e008      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070b6:	bf00      	nop
 80070b8:	e006      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070ba:	bf00      	nop
 80070bc:	e004      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070be:	bf00      	nop
 80070c0:	e002      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80070c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80070c8:	37e8      	adds	r7, #232	; 0xe8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007110:	b5b0      	push	{r4, r5, r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	4313      	orrs	r3, r2
 8007132:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4bad      	ldr	r3, [pc, #692]	; (80073f0 <UART_SetConfig+0x2e0>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	69f9      	ldr	r1, [r7, #28]
 8007144:	430b      	orrs	r3, r1
 8007146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4aa2      	ldr	r2, [pc, #648]	; (80073f4 <UART_SetConfig+0x2e4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a99      	ldr	r2, [pc, #612]	; (80073f8 <UART_SetConfig+0x2e8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d121      	bne.n	80071da <UART_SetConfig+0xca>
 8007196:	4b99      	ldr	r3, [pc, #612]	; (80073fc <UART_SetConfig+0x2ec>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d817      	bhi.n	80071d4 <UART_SetConfig+0xc4>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <UART_SetConfig+0x9c>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071c9 	.word	0x080071c9
 80071b4:	080071c3 	.word	0x080071c3
 80071b8:	080071cf 	.word	0x080071cf
 80071bc:	2301      	movs	r3, #1
 80071be:	76fb      	strb	r3, [r7, #27]
 80071c0:	e0e7      	b.n	8007392 <UART_SetConfig+0x282>
 80071c2:	2302      	movs	r3, #2
 80071c4:	76fb      	strb	r3, [r7, #27]
 80071c6:	e0e4      	b.n	8007392 <UART_SetConfig+0x282>
 80071c8:	2304      	movs	r3, #4
 80071ca:	76fb      	strb	r3, [r7, #27]
 80071cc:	e0e1      	b.n	8007392 <UART_SetConfig+0x282>
 80071ce:	2308      	movs	r3, #8
 80071d0:	76fb      	strb	r3, [r7, #27]
 80071d2:	e0de      	b.n	8007392 <UART_SetConfig+0x282>
 80071d4:	2310      	movs	r3, #16
 80071d6:	76fb      	strb	r3, [r7, #27]
 80071d8:	e0db      	b.n	8007392 <UART_SetConfig+0x282>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a88      	ldr	r2, [pc, #544]	; (8007400 <UART_SetConfig+0x2f0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d132      	bne.n	800724a <UART_SetConfig+0x13a>
 80071e4:	4b85      	ldr	r3, [pc, #532]	; (80073fc <UART_SetConfig+0x2ec>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d828      	bhi.n	8007244 <UART_SetConfig+0x134>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0xe8>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007245 	.word	0x08007245
 8007204:	08007245 	.word	0x08007245
 8007208:	08007239 	.word	0x08007239
 800720c:	08007245 	.word	0x08007245
 8007210:	08007245 	.word	0x08007245
 8007214:	08007245 	.word	0x08007245
 8007218:	08007233 	.word	0x08007233
 800721c:	08007245 	.word	0x08007245
 8007220:	08007245 	.word	0x08007245
 8007224:	08007245 	.word	0x08007245
 8007228:	0800723f 	.word	0x0800723f
 800722c:	2300      	movs	r3, #0
 800722e:	76fb      	strb	r3, [r7, #27]
 8007230:	e0af      	b.n	8007392 <UART_SetConfig+0x282>
 8007232:	2302      	movs	r3, #2
 8007234:	76fb      	strb	r3, [r7, #27]
 8007236:	e0ac      	b.n	8007392 <UART_SetConfig+0x282>
 8007238:	2304      	movs	r3, #4
 800723a:	76fb      	strb	r3, [r7, #27]
 800723c:	e0a9      	b.n	8007392 <UART_SetConfig+0x282>
 800723e:	2308      	movs	r3, #8
 8007240:	76fb      	strb	r3, [r7, #27]
 8007242:	e0a6      	b.n	8007392 <UART_SetConfig+0x282>
 8007244:	2310      	movs	r3, #16
 8007246:	76fb      	strb	r3, [r7, #27]
 8007248:	e0a3      	b.n	8007392 <UART_SetConfig+0x282>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a6d      	ldr	r2, [pc, #436]	; (8007404 <UART_SetConfig+0x2f4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d120      	bne.n	8007296 <UART_SetConfig+0x186>
 8007254:	4b69      	ldr	r3, [pc, #420]	; (80073fc <UART_SetConfig+0x2ec>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800725e:	2b30      	cmp	r3, #48	; 0x30
 8007260:	d013      	beq.n	800728a <UART_SetConfig+0x17a>
 8007262:	2b30      	cmp	r3, #48	; 0x30
 8007264:	d814      	bhi.n	8007290 <UART_SetConfig+0x180>
 8007266:	2b20      	cmp	r3, #32
 8007268:	d009      	beq.n	800727e <UART_SetConfig+0x16e>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d810      	bhi.n	8007290 <UART_SetConfig+0x180>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <UART_SetConfig+0x168>
 8007272:	2b10      	cmp	r3, #16
 8007274:	d006      	beq.n	8007284 <UART_SetConfig+0x174>
 8007276:	e00b      	b.n	8007290 <UART_SetConfig+0x180>
 8007278:	2300      	movs	r3, #0
 800727a:	76fb      	strb	r3, [r7, #27]
 800727c:	e089      	b.n	8007392 <UART_SetConfig+0x282>
 800727e:	2302      	movs	r3, #2
 8007280:	76fb      	strb	r3, [r7, #27]
 8007282:	e086      	b.n	8007392 <UART_SetConfig+0x282>
 8007284:	2304      	movs	r3, #4
 8007286:	76fb      	strb	r3, [r7, #27]
 8007288:	e083      	b.n	8007392 <UART_SetConfig+0x282>
 800728a:	2308      	movs	r3, #8
 800728c:	76fb      	strb	r3, [r7, #27]
 800728e:	e080      	b.n	8007392 <UART_SetConfig+0x282>
 8007290:	2310      	movs	r3, #16
 8007292:	76fb      	strb	r3, [r7, #27]
 8007294:	e07d      	b.n	8007392 <UART_SetConfig+0x282>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a5b      	ldr	r2, [pc, #364]	; (8007408 <UART_SetConfig+0x2f8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d120      	bne.n	80072e2 <UART_SetConfig+0x1d2>
 80072a0:	4b56      	ldr	r3, [pc, #344]	; (80073fc <UART_SetConfig+0x2ec>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072aa:	2bc0      	cmp	r3, #192	; 0xc0
 80072ac:	d013      	beq.n	80072d6 <UART_SetConfig+0x1c6>
 80072ae:	2bc0      	cmp	r3, #192	; 0xc0
 80072b0:	d814      	bhi.n	80072dc <UART_SetConfig+0x1cc>
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d009      	beq.n	80072ca <UART_SetConfig+0x1ba>
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d810      	bhi.n	80072dc <UART_SetConfig+0x1cc>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <UART_SetConfig+0x1b4>
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d006      	beq.n	80072d0 <UART_SetConfig+0x1c0>
 80072c2:	e00b      	b.n	80072dc <UART_SetConfig+0x1cc>
 80072c4:	2300      	movs	r3, #0
 80072c6:	76fb      	strb	r3, [r7, #27]
 80072c8:	e063      	b.n	8007392 <UART_SetConfig+0x282>
 80072ca:	2302      	movs	r3, #2
 80072cc:	76fb      	strb	r3, [r7, #27]
 80072ce:	e060      	b.n	8007392 <UART_SetConfig+0x282>
 80072d0:	2304      	movs	r3, #4
 80072d2:	76fb      	strb	r3, [r7, #27]
 80072d4:	e05d      	b.n	8007392 <UART_SetConfig+0x282>
 80072d6:	2308      	movs	r3, #8
 80072d8:	76fb      	strb	r3, [r7, #27]
 80072da:	e05a      	b.n	8007392 <UART_SetConfig+0x282>
 80072dc:	2310      	movs	r3, #16
 80072de:	76fb      	strb	r3, [r7, #27]
 80072e0:	e057      	b.n	8007392 <UART_SetConfig+0x282>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a49      	ldr	r2, [pc, #292]	; (800740c <UART_SetConfig+0x2fc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d125      	bne.n	8007338 <UART_SetConfig+0x228>
 80072ec:	4b43      	ldr	r3, [pc, #268]	; (80073fc <UART_SetConfig+0x2ec>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d017      	beq.n	800732c <UART_SetConfig+0x21c>
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007300:	d817      	bhi.n	8007332 <UART_SetConfig+0x222>
 8007302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007306:	d00b      	beq.n	8007320 <UART_SetConfig+0x210>
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d811      	bhi.n	8007332 <UART_SetConfig+0x222>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <UART_SetConfig+0x20a>
 8007312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007316:	d006      	beq.n	8007326 <UART_SetConfig+0x216>
 8007318:	e00b      	b.n	8007332 <UART_SetConfig+0x222>
 800731a:	2300      	movs	r3, #0
 800731c:	76fb      	strb	r3, [r7, #27]
 800731e:	e038      	b.n	8007392 <UART_SetConfig+0x282>
 8007320:	2302      	movs	r3, #2
 8007322:	76fb      	strb	r3, [r7, #27]
 8007324:	e035      	b.n	8007392 <UART_SetConfig+0x282>
 8007326:	2304      	movs	r3, #4
 8007328:	76fb      	strb	r3, [r7, #27]
 800732a:	e032      	b.n	8007392 <UART_SetConfig+0x282>
 800732c:	2308      	movs	r3, #8
 800732e:	76fb      	strb	r3, [r7, #27]
 8007330:	e02f      	b.n	8007392 <UART_SetConfig+0x282>
 8007332:	2310      	movs	r3, #16
 8007334:	76fb      	strb	r3, [r7, #27]
 8007336:	e02c      	b.n	8007392 <UART_SetConfig+0x282>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2d      	ldr	r2, [pc, #180]	; (80073f4 <UART_SetConfig+0x2e4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d125      	bne.n	800738e <UART_SetConfig+0x27e>
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <UART_SetConfig+0x2ec>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007350:	d017      	beq.n	8007382 <UART_SetConfig+0x272>
 8007352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007356:	d817      	bhi.n	8007388 <UART_SetConfig+0x278>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735c:	d00b      	beq.n	8007376 <UART_SetConfig+0x266>
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007362:	d811      	bhi.n	8007388 <UART_SetConfig+0x278>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0x260>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d006      	beq.n	800737c <UART_SetConfig+0x26c>
 800736e:	e00b      	b.n	8007388 <UART_SetConfig+0x278>
 8007370:	2300      	movs	r3, #0
 8007372:	76fb      	strb	r3, [r7, #27]
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0x282>
 8007376:	2302      	movs	r3, #2
 8007378:	76fb      	strb	r3, [r7, #27]
 800737a:	e00a      	b.n	8007392 <UART_SetConfig+0x282>
 800737c:	2304      	movs	r3, #4
 800737e:	76fb      	strb	r3, [r7, #27]
 8007380:	e007      	b.n	8007392 <UART_SetConfig+0x282>
 8007382:	2308      	movs	r3, #8
 8007384:	76fb      	strb	r3, [r7, #27]
 8007386:	e004      	b.n	8007392 <UART_SetConfig+0x282>
 8007388:	2310      	movs	r3, #16
 800738a:	76fb      	strb	r3, [r7, #27]
 800738c:	e001      	b.n	8007392 <UART_SetConfig+0x282>
 800738e:	2310      	movs	r3, #16
 8007390:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a17      	ldr	r2, [pc, #92]	; (80073f4 <UART_SetConfig+0x2e4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	f040 8087 	bne.w	80074ac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800739e:	7efb      	ldrb	r3, [r7, #27]
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d837      	bhi.n	8007414 <UART_SetConfig+0x304>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <UART_SetConfig+0x29c>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	08007415 	.word	0x08007415
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	08007415 	.word	0x08007415
 80073bc:	080073df 	.word	0x080073df
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007415 	.word	0x08007415
 80073c8:	08007415 	.word	0x08007415
 80073cc:	080073e7 	.word	0x080073e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fd fce8 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 80073d4:	6178      	str	r0, [r7, #20]
        break;
 80073d6:	e022      	b.n	800741e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <UART_SetConfig+0x300>)
 80073da:	617b      	str	r3, [r7, #20]
        break;
 80073dc:	e01f      	b.n	800741e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073de:	f7fd fc49 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 80073e2:	6178      	str	r0, [r7, #20]
        break;
 80073e4:	e01b      	b.n	800741e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ea:	617b      	str	r3, [r7, #20]
        break;
 80073ec:	e017      	b.n	800741e <UART_SetConfig+0x30e>
 80073ee:	bf00      	nop
 80073f0:	efff69f3 	.word	0xefff69f3
 80073f4:	40008000 	.word	0x40008000
 80073f8:	40013800 	.word	0x40013800
 80073fc:	40021000 	.word	0x40021000
 8007400:	40004400 	.word	0x40004400
 8007404:	40004800 	.word	0x40004800
 8007408:	40004c00 	.word	0x40004c00
 800740c:	40005000 	.word	0x40005000
 8007410:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	76bb      	strb	r3, [r7, #26]
        break;
 800741c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80f1 	beq.w	8007608 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	4413      	add	r3, r2
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	429a      	cmp	r2, r3
 8007434:	d305      	bcc.n	8007442 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	429a      	cmp	r2, r3
 8007440:	d902      	bls.n	8007448 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	76bb      	strb	r3, [r7, #26]
 8007446:	e0df      	b.n	8007608 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4618      	mov	r0, r3
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	020b      	lsls	r3, r1, #8
 800745a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800745e:	0202      	lsls	r2, r0, #8
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	6849      	ldr	r1, [r1, #4]
 8007464:	0849      	lsrs	r1, r1, #1
 8007466:	4608      	mov	r0, r1
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	1814      	adds	r4, r2, r0
 800746e:	eb43 0501 	adc.w	r5, r3, r1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	461a      	mov	r2, r3
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f8 fea2 	bl	80001c8 <__aeabi_uldivmod>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4613      	mov	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007492:	d308      	bcc.n	80074a6 <UART_SetConfig+0x396>
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749a:	d204      	bcs.n	80074a6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	e0b0      	b.n	8007608 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	76bb      	strb	r3, [r7, #26]
 80074aa:	e0ad      	b.n	8007608 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b4:	d15b      	bne.n	800756e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80074b6:	7efb      	ldrb	r3, [r7, #27]
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d828      	bhi.n	800750e <UART_SetConfig+0x3fe>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x3b4>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	080074f1 	.word	0x080074f1
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	0800750f 	.word	0x0800750f
 80074d4:	080074ff 	.word	0x080074ff
 80074d8:	0800750f 	.word	0x0800750f
 80074dc:	0800750f 	.word	0x0800750f
 80074e0:	0800750f 	.word	0x0800750f
 80074e4:	08007507 	.word	0x08007507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fd fc5c 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6178      	str	r0, [r7, #20]
        break;
 80074ee:	e013      	b.n	8007518 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f0:	f7fd fc6e 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 80074f4:	6178      	str	r0, [r7, #20]
        break;
 80074f6:	e00f      	b.n	8007518 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f8:	4b49      	ldr	r3, [pc, #292]	; (8007620 <UART_SetConfig+0x510>)
 80074fa:	617b      	str	r3, [r7, #20]
        break;
 80074fc:	e00c      	b.n	8007518 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fe:	f7fd fbb9 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8007502:	6178      	str	r0, [r7, #20]
        break;
 8007504:	e008      	b.n	8007518 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750a:	617b      	str	r3, [r7, #20]
        break;
 800750c:	e004      	b.n	8007518 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	76bb      	strb	r3, [r7, #26]
        break;
 8007516:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d074      	beq.n	8007608 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	005a      	lsls	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	441a      	add	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007532:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d916      	bls.n	8007568 <UART_SetConfig+0x458>
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007540:	d212      	bcs.n	8007568 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f023 030f 	bic.w	r3, r3, #15
 800754a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	b29b      	uxth	r3, r3
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	b29a      	uxth	r2, r3
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	4313      	orrs	r3, r2
 800755c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	89fa      	ldrh	r2, [r7, #14]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e04f      	b.n	8007608 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	76bb      	strb	r3, [r7, #26]
 800756c:	e04c      	b.n	8007608 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800756e:	7efb      	ldrb	r3, [r7, #27]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d828      	bhi.n	80075c6 <UART_SetConfig+0x4b6>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <UART_SetConfig+0x46c>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075c7 	.word	0x080075c7
 800758c:	080075b7 	.word	0x080075b7
 8007590:	080075c7 	.word	0x080075c7
 8007594:	080075c7 	.word	0x080075c7
 8007598:	080075c7 	.word	0x080075c7
 800759c:	080075bf 	.word	0x080075bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a0:	f7fd fc00 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 80075a4:	6178      	str	r0, [r7, #20]
        break;
 80075a6:	e013      	b.n	80075d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a8:	f7fd fc12 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 80075ac:	6178      	str	r0, [r7, #20]
        break;
 80075ae:	e00f      	b.n	80075d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b0:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <UART_SetConfig+0x510>)
 80075b2:	617b      	str	r3, [r7, #20]
        break;
 80075b4:	e00c      	b.n	80075d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fd fb5d 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 80075ba:	6178      	str	r0, [r7, #20]
        break;
 80075bc:	e008      	b.n	80075d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c2:	617b      	str	r3, [r7, #20]
        break;
 80075c4:	e004      	b.n	80075d0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	76bb      	strb	r3, [r7, #26]
        break;
 80075ce:	bf00      	nop
    }

    if (pclk != 0U)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	085a      	lsrs	r2, r3, #1
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	441a      	add	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b0f      	cmp	r3, #15
 80075ee:	d909      	bls.n	8007604 <UART_SetConfig+0x4f4>
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f6:	d205      	bcs.n	8007604 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	e001      	b.n	8007608 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007614:	7ebb      	ldrb	r3, [r7, #26]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bdb0      	pop	{r4, r5, r7, pc}
 800761e:	bf00      	nop
 8007620:	00f42400 	.word	0x00f42400

08007624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01a      	beq.n	800773a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007722:	d10a      	bne.n	800773a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	605a      	str	r2, [r3, #4]
  }
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af02      	add	r7, sp, #8
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007778:	f7f9 ff9a 	bl	80016b0 <HAL_GetTick>
 800777c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d10e      	bne.n	80077aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f82d 	bl	80077fa <UART_WaitOnFlagUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e023      	b.n	80077f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d10e      	bne.n	80077d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f817 	bl	80077fa <UART_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e00d      	b.n	80077f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b09c      	sub	sp, #112	; 0x70
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	e0a5      	b.n	8007958 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	f000 80a1 	beq.w	8007958 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007816:	f7f9 ff4b 	bl	80016b0 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007822:	429a      	cmp	r2, r3
 8007824:	d302      	bcc.n	800782c <UART_WaitOnFlagUntilTimeout+0x32>
 8007826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007828:	2b00      	cmp	r3, #0
 800782a:	d13e      	bne.n	80078aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007840:	667b      	str	r3, [r7, #100]	; 0x64
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800784a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800784c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	663b      	str	r3, [r7, #96]	; 0x60
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800787e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800788c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e067      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d04f      	beq.n	8007958 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c6:	d147      	bne.n	8007958 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
 80078f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e6      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	613b      	str	r3, [r7, #16]
   return(result);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	66bb      	str	r3, [r7, #104]	; 0x68
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3308      	adds	r3, #8
 8007922:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007924:	623a      	str	r2, [r7, #32]
 8007926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	61bb      	str	r3, [r7, #24]
   return(result);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e010      	b.n	800797a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69da      	ldr	r2, [r3, #28]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	4013      	ands	r3, r2
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	429a      	cmp	r2, r3
 8007966:	bf0c      	ite	eq
 8007968:	2301      	moveq	r3, #1
 800796a:	2300      	movne	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	429a      	cmp	r2, r3
 8007974:	f43f af4a 	beq.w	800780c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3770      	adds	r7, #112	; 0x70
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007982:	b480      	push	{r7}
 8007984:	b095      	sub	sp, #84	; 0x54
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800799e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
 80079aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d118      	bne.n	8007a2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6979      	ldr	r1, [r7, #20]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a3c:	bf00      	nop
 8007a3e:	3754      	adds	r7, #84	; 0x54
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fb3c 	bl	80070e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a6c:	bf00      	nop
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e6      	bne.n	8007a7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fb08 	bl	80070d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac0:	bf00      	nop
 8007ac2:	3720      	adds	r7, #32
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4d0d      	ldr	r5, [pc, #52]	; (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1b64      	subs	r4, r4, r5
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4d0b      	ldr	r5, [pc, #44]	; (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	; (8007b20 <__libc_init_array+0x44>)
 8007af0:	f000 f820 	bl	8007b34 <_init>
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2600      	movs	r6, #0
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	08007b9c 	.word	0x08007b9c
 8007b18:	08007b9c 	.word	0x08007b9c
 8007b1c:	08007b9c 	.word	0x08007b9c
 8007b20:	08007ba0 	.word	0x08007ba0

08007b24 <memset>:
 8007b24:	4402      	add	r2, r0
 8007b26:	4603      	mov	r3, r0
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d100      	bne.n	8007b2e <memset+0xa>
 8007b2c:	4770      	bx	lr
 8007b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b32:	e7f9      	b.n	8007b28 <memset+0x4>

08007b34 <_init>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr

08007b40 <_fini>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr
